####### trim and fill
random_tf <- trimfill(resr, estimator = "R0")
random_tf
forest(random_tf, slab = c(dat1$author, "Fill1", "Fill2"), main = "Forest plot with trim and fill", header = TRUE, cex = 1)
funnel(random_tf, main = "Funnel plot with trim and fill")
regtest(random_tf)
####### with moderators
random_mods1 <- rma(yi, vi, mods = ~ weeks + setting + tester, data=dat1, method = "ML")
random_mods1
random_mods1b <- rma(yi, vi, mods = ~ setting + tester, data=dat1, method ="ML")
random_mods1b
random_mods1c <- rma(yi, vi, mods = ~ weeks, data=dat1, method ="ML")
random_mods1c
anova.rma(random_mods1, random_mods1b)
anova.rma(random_mods1, random_mods1c)
4+5
getwd()
getwd()
setwd("C:/Users/bente/Documents/Studium/BachelorPsychologie/Projekte/KlinMethGoettingen")
dat = read.csv("motivation_precourse.csv")
dat[1]
dat[3]
dat$mot_post
dat[3][1]
dat[3]
dat[3]$mot_post
dat$mot_post
head(dat$mot_post)
dat[4, 1]
dat[1, 4]
dat[, 3]
head(dat[, 3])
head(dat$mot_post)
attr(dat$mot_post)
attr(dat$mot_post, "test")
attr(dat$mot_post, "test", "HAHAHA")
attr(dat$mot_post, "Test") = "HAHAA"
attr(dat$mot_post, "Test")
attr(dat$mot_post, "Test") = NULL
2 ^ 3 == 8
1:4 ^ 3 == 8
1:4 .^ 3 == 8
1:4 ^ 3 == 8
2 ^ 1:4 == 8
2 ^ (1:4) == 8
dat == "Ohne"
dat$precourse == "Ohne"
head(dat == "Ohne")
head(dat$precourse == "Ohne")
sum(dat$precourse == "Ohne"))
sum(dat$precourse == "Ohne")
dat_ohne = dat[dat$precourse == "Ohne", ]
dat_ohne[dat_ohne$precourse != "Ohne"]
dat_ohne[dat_ohne$precourse != "Ohne", ]
dat_first_100 = subset(dat, subject_nr <= 100)
dat_first_100 = subset(dat, dat$subject_nr <= 100)
?subset
dat_first_100 = subset(dat, dat$subject_nr <= 100)
dat_first_100 = subset(dat, dat$subjectNr <= 100)
dat_no_pre = subset(dat, select=c(1, 3, 4))
dat_no_pre = subset(dat, select=c("mot_post"))
dat_no_pre = subset(dat, select=c("precourse", "mot_post", "subjectNr"))
setwd("Vorkurs")
setwd("../")
read.csv("motivation_precourse.csv")
read.csv("Vorkurs/motivation_precourse.csv")
gender = c(rep(1, 48), rep(2, 48), rep(3, 3), 4)
home = c(rep(1, 24), rep(2, 24), rep(1, 24), rep(2, 24), 1, 1, 2, 2)
visited = round(5 + rnorm(100, 0, 2) + (gender == 1) * 3 + (home - 1) * 2)
min(visited)
max(visited)
visited = round(5 + rnorm(100, 0, 1) + (gender == 1) * 3 + (home - 1) * 2)
max(visited)
min(visited)
alcohol = 0.75 * scale(visited) * 10 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2)
alcohol = round(0.75 * scale(visited) * 10 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
alcohol = round(10 + 0.75 * scale(visited) * 15 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
corr(visited, alcohol)
cor(visited, alcohol)
alcohol = round(10 + 0.75 * scale(visited) * 7.5 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
cor(visited, alcohol)
alcohol = round(10 + 0.75 * scale(visited) * 2.5 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
cor(visited, alcohol)
alcohol = round(10 + 0.75 * scale(visited) * 1 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
cor(visited, alcohol)
alcohol = round(10 + 0.75 * scale(visited) * 0.5 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
cor(visited, alcohol)
alcohol = round(10 + 0.75 * scale(visited) * 0.75 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
cor(visited, alcohol)
weight = 70 + rnorm(100, 0, 10) + (gender == 2) * 15
min(weight)
max(weight)
dat = data.frame(gender, home, visited, alcohol, weight)
dat = dat[sample(dat), ]
dat = dat[sample(1:nrow(dat)), ]
dat$subjectNr = 1:nrow(dat)
gender = c(rep(1, 48), rep(2, 48), rep(3, 3), 4)
heimat = c(rep(1, 24), rep(2, 24), rep(1, 24), rep(2, 24), 1, 1, 2, 2)
besucht = round(5 + rnorm(100, 0, 1) + (gender == 1) * 3 + (home - 1) * 2)
alkohol = round(10 + 0.75 * scale(visited) * 0.75 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
gewicht = 70 + rnorm(100, 0, 10) + (gender == 2) * 15
dat = data.frame(gender, heimat, besucht, alkohol, gewicht)
dat = dat[sample(1:nrow(dat)), ]
dat$subjectNr = 1:nrow(dat)
gender = c(rep(1, 48), rep(2, 48), rep(3, 3), 4)
home = c(rep(1, 24), rep(2, 24), rep(1, 24), rep(2, 24), 1, 1, 2, 2)
visited = round(5 + rnorm(100, 0, 1) + (gender == 1) * 3 + (home - 1) * 2)
alcohol = round(10 + 0.75 * scale(visited) * 0.75 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
weight = 70 + rnorm(100, 0, 10) + (gender == 2) * 15
dat = data.frame(gender, home, visited, alcohol, weight)
dat = dat[sample(1:nrow(dat)), ]
dat$subjectNr = 1:nrow(dat)
rm(heimat, besucht, alkohol, gewicht)
alcohol = round(10 + 0.75 * scale(visited) * 0.75 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
scale(visited)
unlist(scale(visited))
scale(visited)[, 1]
alcohol = round(10 + 0.75 * scale(visited)[, 1] * 0.75 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
weight = 70 + rnorm(100, 0, 10) + (gender == 2) * 15
dat = data.frame(gender, home, visited, alcohol, weight)
dat = dat[sample(1:nrow(dat)), ]
dat$subjectNr = 1:nrow(dat)
setwd("Vorkurs")
write.csv(dat, "consumption_ophase.csv", row.names=F)
rm(gender, home, visited, alcohol, weight)
setwd("../")
dat = read.csv("consumption_ophase.csv")
setwd("Vorkurs")
setwd("Vorkurs")
dat = read.csv("consumption_ophase.csv")
dat$gender = factor(dat$gender, levels=1:4, labels=c("weiblich", "männlich", "divers", "keine Angabe"))
dat$home = factor(dat$home, levels=1:2, labels=c("Norden", "Süden"))
# Einfaches scatterplot zwei kontinuierlichen Variablen
ggplot(dat, aes(x = weight, y = alcohol)) +
geom_point()
library(ggplot2)
dat = read.csv("consumption_ophase.csv")
dat$gender = factor(dat$gender, levels=1:4, labels=c("weiblich", "männlich", "divers", "keine Angabe"))
dat$home = factor(dat$home, levels=1:2, labels=c("Norden", "Süden"))
# Einfaches scatterplot zwei kontinuierlichen Variablen
ggplot(dat, aes(x = weight, y = alcohol)) +
geom_point()
gender = c(rep(1, 48), rep(2, 48), rep(3, 3), 4)
home = c(rep(1, 24), rep(2, 24), rep(1, 24), rep(2, 24), 1, 1, 2, 2)
visited = round(5 + rnorm(100, 0, 1) + (gender == 1) * 3 + (home - 1) * 2)
alcohol = round(5 + 0.75 * scale(visited)[, 1] * 0.75 + 0.25 * (rnorm(100, 0, 1) + (gender == 2) * 5 + (home - 1) * 2), 1)
dat = data.frame(gender, home, visited, alcohol, weight)
dat = dat[sample(1:nrow(dat)), ]
dat$subjectNr = 1:nrow(dat)
dat = data.frame(gender, home, visited, alcohol, weight)
weight = 70 + rnorm(100, 0, 10) + (gender == 2) * 15
dat = data.frame(gender, home, visited, alcohol, weight)
dat = dat[sample(1:nrow(dat)), ]
dat$subjectNr = 1:nrow(dat)
write.csv(dat, "consumption_ophase.csv", row.names=F)
rm(gender, home, visited, alcohol, weight)
dat = read.csv("consumption_ophase.csv")
dat$gender = factor(dat$gender, levels=1:4, labels=c("weiblich", "männlich", "divers", "keine Angabe"))
dat$home = factor(dat$home, levels=1:2, labels=c("Norden", "Süden"))
# Einfaches scatterplot zwei kontinuierlichen Variablen
ggplot(dat, aes(x = weight, y = alcohol)) +
geom_point()
# Zusaetzlich Faktor "Zylinder" als dritte Variable
p = ggplot(mpg, aes(displ, hwy, colour = cyl)) +
geom_point()
p
# Zusaetzlich Faktor "Zylinder" als dritte Variable
p = ggplot(dat, aes(weight, alcohol, colour = home)) +
geom_point()
p
# Mit Achsenbezeichnungen und Titel
p = p +
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
# Mit Linie für Zusammenhang mit geom_smooth
## wird automatisch für jede Gruppe getrennt gemacht
p +
geom_smooth()
# Mit Regressionsline für linearen Zusammenhang mit geom_smooth
p +
geom_smooth(method = "lm")
# Aufteilung in verschiedene Graphiken anhand eines dritten Faktors mit facet_wrap
## Faktor Fahrzeugklasse
ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_wrap(~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
# Einfügen zusaetzlicher, sekundaerer Achsen um die Facets zu bezeichnen
p = p +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Antrieb", breaks = NULL, labels = NULL)) +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Zylinder", breaks = NULL, labels = NULL))
p
# Einfügen zusaetzlicher, sekundaerer Achsen um die Facets zu bezeichnen
p = p +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Home", breaks = NULL, labels = NULL)) +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Gender", breaks = NULL, labels = NULL))
p
dat$gender = factor(dat$gender, levels=1:4, labels=c("female", "male", "diverse", "no answer"))
dat$home = factor(dat$home, levels=1:2, labels=c("North", "South"))
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
library(ggplot2)
setwd("Vorkurs")
setwd("Vorkurs")
setwd("Vorkurs")
dat = read.csv("consumption_ophase.csv")
dat$gender = factor(dat$gender, levels=1:4, labels=c("female", "male", "diverse", "no answer"))
dat$home = factor(dat$home, levels=1:2, labels=c("North", "South"))
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
dat$home = factor(dat$home, levels=1:2, labels=c("north", "south"))
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
dat = read.csv("consumption_ophase.csv")
dat$gender = factor(dat$gender, levels=1:4, labels=c("female", "male", "diverse", "no answer"))
dat$home = factor(dat$home, levels=1:2, labels=c("north", "south"))
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
# Einfügen zusaetzlicher, sekundaerer Achsen um die Facets zu bezeichnen
p = p +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Home", breaks = NULL, labels = NULL)) +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Gender", breaks = NULL, labels = NULL))
p
getwd()
??describeBy
```{r}
ggplot(dat, aes(alcohol)) + geom_histogram() + facet_wrap(~gender)
ggplot(dat, aes(alcohol)) + geom_bar() + facet_wrap(~gender) + labs(x = "Alcohol consumption in l", y = "Count") + ggtitle("Alcohol consumption by gender") + ylim(0,25)
ggplot(dat, aes(alcohol)) + geom_bar() + facet_wrap(~gender) + labs(x = "Alcohol consumption in l", y = "Count") + ggtitle("Alcohol consumption by gender") + ylim(0,10)
ggplot(dat, aes(home, visited)) +
geom_jitter(width = 0.2, height = 0)
ggplot(mpg, aes(drv, hwy)) + geom_violin() + geom_point() + geom_jitter(width = 0.2, height = 0)
ggplot(dat, aes(home, visitd)) + geom_violin() + geom_point() + geom_jitter(width = 0.2, height = 0)
ggplot(dat, aes(home, visited)) + geom_violin() + geom_point() + geom_jitter(width = 0.2, height = 0)
# Mit violin plot und Mittelwert mit Fehlerbalken
ggplot(dat, aes(home, visited)) + geom_violin() + geom_point() +
geom_jitter(width = 0.2, height = 0) +
geom_point(stat="summary",fun = mean,size=1.5, col = "red") +
stat_summary(geom="errorbar", fun.data=mean_se, width=.2, col ="red")+
theme_classic()
descriptives <- describeBy(visited ~ home, mat = TRUE, data = dat)
library(psych)
descriptives <- describeBy(visited ~ home, mat = TRUE, data = dat)
#### Name des Faktors einfügen
names(descriptives)[names(descriptives) == "group1"] <- "home"
#### Konfidenzintervall ausrechnen
descriptives$ci_95 <- descriptives$se*1.96
#### Graphik machen
ggplot(descriptives, aes(x=home, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=mean-ci_95, ymax=mean+ci_95), width=.1)+
ggtitle("Visited events by home")+
theme_classic()
ggplot(dat, aes(home, visited)) +
stat_summary(fun = mean, geom = "bar", fill = "dark blue") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=.3)+
ggtitle("Visited events by home")+
theme_classic()
pd <- position_dodge(1) # setzt die Balken nebeneinander
ggplot(dat, aes(home, visited, fill = gender)) +
stat_summary(fun = mean, geom = "bar", position = pd, preserve = "single") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=.3, position = pd, preserve = "single")+
ggtitle("Visited events by home")+
theme_classic()
?stat_summary
pd <- position_dodge(1, preserve = "single") # setzt die Balken nebeneinander
ggplot(dat, aes(home, visited, fill = gender)) +
stat_summary(fun = mean, geom = "bar", position = pd, preserve = "single") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=.3, position = pd, preserve = "single")+
ggtitle("Visited events by home")+
theme_classic()
ggplot(dat, aes(home, visited, color = gender)) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=.3)+
ggtitle("Visited events by home and gender")+
theme_classic()
pd <- position_dodge(0.4)
ggplot(dat, aes(home, visited, color = gender)) +
stat_summary(fun = mean, geom = "point", position=pd) +
stat_summary(fun.data = mean_se, geom = "errorbar", position=pd, width=.3)+
ggtitle("Visited events by home and gender")+
theme_classic()
test = 1:5
attr(test[2], "Trollen") = "Ja"
test
test[2]
attr(test, "Trollen") = "Ja"
test
rm(test)
??cohen.d
getwd()
dat = read.csv("motivation_precourse.csv")
dat$precourse = as.factor(dat$precourse)
ggplot(dat, aes(precourse, mot_post)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
stat_summary(fun = mean, geom = "point", size = 2, col = "red")  +
stat_summary(geom="errorbar", fun.data=mean_cl_normal, width=.1, col ="red")+
ylim(0,10) +
ylab("Motivation score") +
xlab("Precourse") +
ggtitle("Motivation after precourse")
model = lm(mot_post ~ precourse, data=dat)
?durbinWatsonTest
??durbinWatsonTest
library(car)
?durbinWatsonTest
## Verteilung der Residuen
densityPlot(model$residuals)
plotNormalDensity(model$residuals)
??plotNormalDensity
install.packages("rcompanion")
library(car)
library(rcompanion)
plotNormalDensity(model$residuals)
## Verteilung der Residuen in Abhängigkeit von vorhergesagten Werten
scatterplot(model$residuals ~ model$fitted.values)
summary(model)
## Statistischer Test auf Homoskedastizität: Breusch-Pagan Test
bptest(model)
??bptest
library(lmtest)
## Statistischer Test auf Homoskedastizität: Breusch-Pagan Test
bptest(model)
durbinWatsonTest(Model) # Test für eine Autokorrelation 1.Ordnung
durbinWatsonTest(model) # Test für eine Autokorrelation 1.Ordnung
summary(model)
library(ggplot2)
library(psych)
library(car)
library(rcompanion)
library(lmtest)
setwd("C:/Users/bente/Documents/Studium/BachelorPsychologie/Projekte/KlinMethGoettingen/Vorkurs")
dat = read.csv("motivation_precourse.csv")
dat$precourse = as.factor(dat$precourse)
?rbinom
pre = rbinom(500, 4, 0.25)
pre
pre = rbinom(500, 4, 0.5)
pre
post = rbinom(500, 4, 0.25)
pre = rbinom(500, 4, 0.5)
post = rbinom(500, 4, 0.25)
subjectNr = 1:500
dat = data.frame(pre, post, subjectNr)
getwd(9)
getwd()
write.csv(dat, "Vorkurs/laune.csv", col.names=F)
write.csv(dat, "Vorkurs/laune.csv", row.names=F)
pre = rbinom(500, 4, 0.5) + 1
post = rbinom(500, 4, 0.25) + 1
subjectNr = 1:500
dat = data.frame(pre, post, subjectNr)
write.csv(dat, "Vorkurs/laune.csv", row.names=F)
dat = read.csv("laune.csv")
setwd("Vorkurs")
dat = read.csv("laune.csv")
setwd("Vorkurs")
setwd("Vorkurs")
dat = read.csv("laune.csv")
setwd("Vorkurs")
dat = read.csv("laune.csv")
??pivot_longer
dat_l = pivot_longer(dat, cols=c("pre", "post"), names_to="time", values_to="mood")
#install.packages("tidyr")
library(tidyr)
dat_l = pivot_longer(dat, cols=c("pre", "post"), names_to="time", values_to="mood")
dat_l$mood_r = 6 - dat_l$mood
library(psych)
describeBy(dat_l)
describeBy(dat_l, mood_r ~ time)
describeBy(dat_l, mood_r ~ time)
describeBy(dat_l$mood_r, dat_l$time)
describeBy(mood_r ~ time, data=dat_l)
?describeBy
describeBy(dat_l$mood_r, dat_l$time)
setwd("Vorkurs")
setwd("..")
knitr::opts_chunk$set(echo = TRUE)
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
?read.csv
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA", encoding="utf8")
setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA", encoding="utf8")
setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA", encoding="UTF-8")
setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA", encoding="UTF-8")
setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
# Characterstrings als Faktoren definieren
dat_1$Gruppe <- as.factor(dat_1$Gruppe)
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("Warteliste", "in_sensu", "in_virtuo"))
# Change berechnen
dat_1$Change <- dat_1$Post - dat_1$Pre
library(ggplot2)
library(psych)
library(Hmisc)
library(car)
library(lmtest)
library(effectsize)
library(rcompanion)
## Prä-Messung
ggplot(dat_1, aes(Gruppe, Pre)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
stat_summary(fun = mean, geom = "point", size = 2, col = "red")  +
stat_summary(geom="errorbar", fun.data=mean_cl_normal, width=.1, col ="red")+
ylim(0,40) +
ylab("Score Anxiety") +
xlab("Treatment") +
ggtitle("Belastung vor Behandlung")
## Post-Messung
ggplot(dat_1, aes(Gruppe, Post)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
stat_summary(fun = mean, geom = "point", size = 2, col = "red")  +
stat_summary(geom="errorbar", fun.data=mean_cl_normal, width=.1, col ="red")+
ylim(0,40) +
ylab("Score Anxiety") +
xlab("Treatment") +
ggtitle("Belastung nach Behandlung")
## Veraenderung
ggplot(dat_1, aes(Gruppe, Change)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
stat_summary(fun = mean, geom = "point", size = 2, col = "red")  +
stat_summary(geom="errorbar", fun.data=mean_cl_normal, width=.1, col ="red")+
ylim(-30,+10) +
ylab("Absolute Change Score Anxiety") +
xlab("Treatment") +
ggtitle("Veränderung Belastung Prä zu Post")
## Zusammenhang Pre-Werte und Post-Werte
ggplot(dat_1, aes(Pre, Post)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~Gruppe)+
ylab("Post-Werte") +
xlab("Prä-Werte")+
ggtitle("Zusammenhang Prä und Post pro Gruppe")
# Zentrierung des kontinuierlichen Praediktors Pre-Wert
dat_1$Pre_c <- scale(dat_1$Pre, center = TRUE, scale = FALSE) # dient der besseren Interpretierbarkeit
# Modelldefinition
M1 <- lm(Post ~ Pre_c + Gruppe, data = dat_1)
# Schaetzung der Parameter
summary(M1)
VA1 <- Anova(M1)
VA1
M1b <- lm(Post ~ Pre_c, data = dat_1)
M1c <- lm(Post ~ Gruppe, data = dat_1)
anova(M1b, M1)
anova(M1c, M1)
eta_squared(VA1)
cohen.d(M1)
cohen.d(dat_1$Post, dat_1$Gruppe)
?cohen.d
cohen.d(dat_1$Post, group2=dat_1$Gruppe)
cohen.d.by(dat_1$Post, group2=dat_1$Gruppe)
cohen.d.by(dat_1$Post, group=rep(1, 150), group2=dat_1$Gruppe)
cohen.d.by(dat_1$Post, group=rep(150, 1), group2=dat_1$Gruppe)
cohen.d.by(dat_1$Post, group=rep(1, 150), group2=dat_1$Gruppe)
cohen.d.by(dat_1, group=rep(1, 150), group2=dat_1$Gruppe)
cohen.d(dat_1, group=dat_1$Gruppe)
cohen.d(Post ~ Gruppe, data=dat_1)
cohen.d(Post ~ Gruppe, data=dat_1[dat1$Gruppe == "in_sensu" | dat_1$Gruppe == "Warteliste", ])
cohen.d(Post ~ Gruppe, data=dat_1[dat_1$Gruppe == "in_sensu" | dat_1$Gruppe == "Warteliste", ])
subset(dat_1, Gruppe == "Warteliste")
