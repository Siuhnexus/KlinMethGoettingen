predmeans1b <- predict(M1, newdata = new, interval = "confidence")
predmeans1b.matrix <- as.data.frame(cbind(new, predmeans1b))
predmeans1b.matrix
# ANOVA zur Bestimmung der Quadratsummen für die beiden Prädiktoren
Anova(M1)
## Umsortieren so dass Warteliste die letzte Ausprägung ist, da die Helmert-Kontrast-Funktion mit der letzten Gruppe beginnt
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("in_virtuo", "in_sensu", "Warteliste"))
# Kontrast für Behandlung definieren und schauen, ob die Kontraste richtig sind
contrasts(dat_1$Gruppe) <- contr.helmert(3)
contrasts(dat_1$Gruppe)
M2 <- lm(Change ~ Pre_c + Gruppe, data = dat_1)
summary(M2)
# Mittelwert Change overall
mean(dat_1$Change)
# Vorhergesagte Mittelwerte
pred.means2 <- predictmeans(M2, "Gruppe", adj ="BH", barplot = TRUE)
pred.means2
pred.means2$predictmeansBarPlot
# ANOVA zur Bestimmung der
Anova(M2)
setwd("Sitzungen")
#setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
# Characterstrings als Faktoren definieren
dat_1$Gruppe <- as.factor(dat_1$Gruppe)
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("in_virtuo", "in_sensu", "Warteliste"))
#setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
# Characterstrings als Faktoren definieren
dat_1$Gruppe <- as.factor(dat_1$Gruppe)
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("in_virtuo", "in_sensu", "Warteliste"))
dat_1_long <- as.data.frame(pivot_longer(dat_1, cols = c(Pre, Post), names_to = "Zeitpunkt",
values_to = "SP_score", values_drop_na = FALSE))
dat_1_long$Zeitpunkt <- as.factor(dat_1_long$Zeitpunkt)
dat_1_long$Zeitpunkt <- factor(dat_1_long$Zeitpunkt, levels = c("Pre", "Post"))
dat_1_long$ID <- as.factor(dat_1_long$ID)
# Soziale Phobie als Kriterium/outcome
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=SP_score)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
facet_wrap(~Gruppe)+
ylab("Score Soziale Phobie") +
xlab("Zeitpunkt") +
ggtitle("Veränderung Soziale Phobie Prä zu Post"))
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=SP_score, group = ID)) +
facet_wrap(~Gruppe)+
geom_line(aes(color= ID), show.legend = FALSE) +
ylab("Score Soziale Phobie") +
xlab("Zeitpunkt") +
ggtitle("Veränderung Soziale Phobie Prä zu Post"))
descriptives <- describeBy(SP_score ~ Zeitpunkt + Gruppe, mat = TRUE, data = dat_1_long)
descriptives
#### Namen der Faktoren in Ergebnimatrix einfuegen
names(descriptives)[names(descriptives) == "group1"] <- "Zeitpunkt"
names(descriptives)[names(descriptives) == "group2"] <- "Bedingung"
#### Konfidenzintervall ausrechnen
descriptives$ci_95 <- descriptives$se*1.96
descriptives$Zeitpunkt <- factor(descriptives$Zeitpunkt, levels = c("Pre", "Post"))
descriptives$Bedingung <- factor(descriptives$Bedingung, levels = c("in_virtuo", "in_sensu", "Warteliste"))
#### Graphik machen
pd <- position_dodge(0.3) # zum Versetzen der Punkte
ggplot(descriptives, aes(x=Zeitpunkt, y=mean, group = Bedingung)) +
geom_errorbar(width=.2, aes(ymin=mean-ci_95, ymax=mean+ci_95), position = pd) +
geom_point(aes(color = Bedingung), size=2, position = pd) +
geom_line(aes(linetype=Bedingung, color = Bedingung), position = pd) +
ggtitle("Mittelwerte plus/minus 95% Konfidenzintervall")+
theme_classic()
# Graphik der Zusammenhänge der Residuen
acf(M1$residuals)
# Modelldefinition
contrasts(dat_1_long$Gruppe) <- contr.helmert(3)
M1 <- lm(SP_score ~ Gruppe * Zeitpunkt, data = dat_1_long)
# Schaetzung der Parameter
summary(M1)
# ANOVA zur Bestimmung der Quadratsummen für die beiden Prädiktoren
Anova(M1)
# Graphik der Zusammenhänge der Residuen
acf(M1$residuals)
# Test für Autokorrelation 1.Ordnung
durbinWatsonTest(M1) # Test für eine Autokorrelation 1.Ordnung
# Korrelation Prä-Post Messung
cor(dat_1$Pre, dat_1$Post)
?durbinWatsonTest
?acf
M1$residuals
#| warning: false
library(ggplot2)
library(psych)
library(Hmisc)
library(car)
library(lmtest)
library(effectsize)
library(rcompanion)
library(tidyr)
library(predictmeans)
library(nlme)
library(ez)
#setwd("Sitzungen")
dat_1 <- read.csv(file = "BDI_1_ALM.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
setwd("Sitzungen")
#setwd("Sitzungen")
dat_1 <- read.csv(file = "BDI_1_ALM.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
# Characterstrings als Faktoren definieren
dat_1$Gruppe <- as.factor(dat_1$Gruppe)
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("Warteliste", "KVT"))
dat_1_long <- as.data.frame(pivot_longer(dat_1, cols = c(Pre, Post, Follow_up), names_to = "Zeitpunkt",
values_to = "BDI", values_drop_na = FALSE))
dat_1_long$Zeitpunkt <- as.factor(dat_1_long$Zeitpunkt)
dat_1_long$Zeitpunkt <- factor(dat_1_long$Zeitpunkt, levels = c("Pre", "Post", "Follow_up"))
dat_1_long$ID <- as.factor(dat_1_long$ID)
# BDI als Kriterium/outcome
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=BDI)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
facet_wrap(~Gruppe)+
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt N=200"))
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=BDI, group = ID)) +
facet_wrap(~Gruppe)+
geom_line(aes(color= ID), show.legend = FALSE) +
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt"))
## Wegen nicht möglicher Werte im BDI Daten bereinigen
dat_1_long_b <- subset(dat_1_long, BDI >= 0)
nrow(dat_1_long_b)
## Abbildungen ohne die nicht möglichen Werte
print(ggplot(dat_1_long_b, aes(x=Zeitpunkt, y=BDI)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
facet_wrap(~Gruppe)+
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt N=200"))
print(ggplot(dat_1_long_b, aes(x=Zeitpunkt, y=BDI, group = ID)) +
facet_wrap(~Gruppe)+
geom_line(aes(color= ID), show.legend = FALSE) +
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt"))
descriptives <- describeBy(BDI ~ Zeitpunkt + Gruppe, mat = TRUE, data = dat_1_long_b)
descriptives
#### Namen der Faktoren in Ergebnimatrix einfuegen
names(descriptives)[names(descriptives) == "group1"] <- "Zeitpunkt"
names(descriptives)[names(descriptives) == "group2"] <- "Bedingung"
#### Konfidenzintervall ausrechnen
descriptives$ci_95 <- descriptives$se*1.96
descriptives$Zeitpunkt <- factor(descriptives$Zeitpunkt, levels = c("Pre", "Post", "Follow_up"))
descriptives$Bedingung <- factor(descriptives$Bedingung, levels = c("Warteliste", "KVT"))
#### Graphik machen
pd <- position_dodge(0.3)
# pd zum Versetzen der Punkte der Mittelwert so dass diese sichtbar sind
ggplot(descriptives, aes(x=Zeitpunkt, y=mean, group = Bedingung)) +
ylim(0,40) +
geom_errorbar(width=.2, aes(ymin=mean-ci_95, ymax=mean+ci_95), position = pd) +
geom_point(aes(color = Bedingung), size=2, position = pd) +
geom_line(aes(linetype=Bedingung, color = Bedingung), position = pd) +
ggtitle("Mittelwerte plus/minus 95% Konfidenzintervall")+
theme_classic()
ezANOVA(within=Zeitpunkt, between=Gruppe, wid=ID, dv=BDI, data=dat_1_long)
# leider mag ezANOVA nicht den Datensatz, in dem die unmöglichen Werte gelöscht wurden, daher der komplette Datensatz
# Mit Trendkontrasten für Faktor Zeitpunkt
###############################################
dat_1_long_b$Zeitpunkt = factor(dat_1_long_b$Zeitpunkt, levels=c("Pre", "Post", "Follow_up"))
contrasts(dat_1_long_b$Zeitpunkt) <- contr.poly(3)
contrasts(dat_1_long_b$Zeitpunkt)
# Modelldefinition
M1 <- lme(BDI ~ Gruppe * Zeitpunkt, random = ~1|ID, data = dat_1_long_b)
summary(M1)
Anova(M1)
# Vorhergesagte Mittelwerte
predmeans <- predictmeans(M1, "Gruppe:Zeitpunkt", adj ="BH", barplot = TRUE)
predmeans
predmeans$predictmeansBarPlot
# Residuen
densityplot(residuals(M1, type = "normalized"))
## Normalisierung ist wichtig, damit Abhängigkeiten richtig berücksichtigt werden
# Abspeichern der Residuen und fitted values in Vektoren
res.vec <- residuals(M1, type = "normalized")
fit.vec <- M1$fitted[,1]
# Scatterplot machen für Verteilung in den 6 Bedingungen
scatterplot(res.vec ~ fit.vec)
# Scatterplot für Residuen unter Berücksichtigung des random intercept
plot(M1)
# Mit Helmertkontrasten für Faktor Zeitpunkt
###############################################
dat_1_long_b$Zeitpunkt = factor(dat_1_long_b$Zeitpunkt, levels=c("Follow_up", "Post", "Pre"))
contrasts(dat_1_long_b$Zeitpunkt) <- contr.helmert(3)
contrasts(dat_1_long_b$Zeitpunkt)
# Modelldefinition
M1_helm <- lme(BDI ~ Gruppe * Zeitpunkt, random = ~1|ID, data = dat_1_long_b)
summary(M1_helm)
Anova(M1_helm)
# Residuen
densityplot(residuals(M1_helm, type = "normalized"))
## Normalisierung ist wichtig, damit Abhängigkeiten richtig berücksichtigt werden
# Abspeichern der Residuen und fitted values in Vektoren
res.vec2 <- residuals(M1_helm, type = "normalized")
fit.vec2 <- M1_helm$fitted[,1]
# Scatterplot machen für Verteilung in den 6 Bedingungen
scatterplot(res.vec2 ~ fit.vec2)
# Scatterplot für Residuen unter Berücksichtigung des random intercept
plot(M1_helm)
dat_Warteliste <- subset(dat_1_long_b, Gruppe == "Warteliste")
dat_KVT <- subset(dat_1_long_b, Gruppe == "KVT")
## Warteliste
contrasts(dat_Warteliste$Zeitpunkt) <- contr.poly(3)
M2 <- lme(BDI ~ Zeitpunkt, random = ~1|ID, data = dat_Warteliste)
summary(M2)
## KVT
dat_KVT$Zeitpunkt <- factor(dat_KVT$Zeitpunkt, levels = c("Follow_up", "Post", "Pre"))
contrasts(dat_KVT$Zeitpunkt) <- contr.helmert(3)
contrasts(dat_KVT$Zeitpunkt)
M3 <- lme(BDI ~ Zeitpunkt, random = ~1|ID, data = dat_KVT)
summary(M3)
# BDI als Kriterium/outcome
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=BDI)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
facet_wrap(~Gruppe)+
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt N=200"))
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=BDI, group = ID)) +
facet_wrap(~Gruppe)+
geom_line(aes(color= ID), show.legend = FALSE) +
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt"))
## Wegen nicht möglicher Werte im BDI Daten bereinigen
dat_1_long_b <- subset(dat_1_long, BDI >= 0)
nrow(dat_1_long_b)
## Abbildungen ohne die nicht möglichen Werte
print(ggplot(dat_1_long_b, aes(x=Zeitpunkt, y=BDI)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
facet_wrap(~Gruppe)+
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt N=200"))
print(ggplot(dat_1_long_b, aes(x=Zeitpunkt, y=BDI, group = ID)) +
facet_wrap(~Gruppe)+
geom_line(aes(color= ID), show.legend = FALSE) +
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt"))
mean(dat_1_long[dat_1_long_b$Zeitpunkt == "Pre" & dat_1_long_b$Gruppe == "Warteliste"])
mean(dat_1_long[dat_1_long_b$Zeitpunkt == "Pre" & dat_1_long_b$Gruppe == "Warteliste",])
mean(dat_1_long[dat_1_long_b$Zeitpunkt == "Pre" & dat_1_long_b$Gruppe == "Warteliste",]$BDI)
mean(dat_1_long[dat_1_long_b$Zeitpunkt == "Follow_up" & dat_1_long_b$Gruppe == "Warteliste",]$BDI)
mean(dat_1_long[dat_1_long_b$Zeitpunkt == "Post" & dat_1_long_b$Gruppe == "Warteliste",]$BDI)
## Warteliste
dat_Warteliste$Zeitpunkt <- factor(dat_Warteliste$Zeitpunkt, levels = c("Pre", "Post", "Follow_up"))
contrasts(dat_Warteliste$Zeitpunkt) <- contr.poly(3)
M2 <- lme(BDI ~ Zeitpunkt, random = ~1|ID, data = dat_Warteliste)
summary(M2)
dat_Warteliste <- subset(dat_1_long_b, Gruppe == "Warteliste")
## Warteliste
dat_Warteliste$Zeitpunkt <- factor(dat_Warteliste$Zeitpunkt, levels = c("Pre", "Post", "Follow_up"))
dat_Warteliste$Zeitpunkt
contrasts(dat_Warteliste$Zeitpunkt) <- contr.poly(3)
M2 <- lme(BDI ~ Zeitpunkt, random = ~1|ID, data = dat_Warteliste)
summary(M2)
# Modelldefinition
contrasts(dat_1_long$Gruppe) <- contr.helmert(3)
#setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
# Characterstrings als Faktoren definieren
dat_1$Gruppe <- as.factor(dat_1$Gruppe)
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("in_virtuo", "in_sensu", "Warteliste"))
dat_1_long <- as.data.frame(pivot_longer(dat_1, cols = c(Pre, Post), names_to = "Zeitpunkt",
values_to = "SP_score", values_drop_na = FALSE))
dat_1_long$Zeitpunkt <- as.factor(dat_1_long$Zeitpunkt)
dat_1_long$Zeitpunkt <- factor(dat_1_long$Zeitpunkt, levels = c("Pre", "Post"))
dat_1_long$ID <- as.factor(dat_1_long$ID)
# Modelldefinition
contrasts(dat_1_long$Gruppe) <- contr.helmert(3)
M1 <- lm(SP_score ~ Gruppe * Zeitpunkt, data = dat_1_long)
# Schaetzung der Parameter
summary(M1)
# ANOVA zur Bestimmung der Quadratsummen für die beiden Prädiktoren
Anova(M1)
#setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm1.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
# Characterstrings als Faktoren definieren
dat_1$Gruppe <- as.factor(dat_1$Gruppe)
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("in_virtuo", "in_sensu", "Warteliste"))
dat_1_long <- as.data.frame(pivot_longer(dat_1, cols = c(Pre, Post), names_to = "Zeitpunkt",
values_to = "SP_score", values_drop_na = FALSE))
dat_1_long$Zeitpunkt <- as.factor(dat_1_long$Zeitpunkt)
dat_1_long$Zeitpunkt <- factor(dat_1_long$Zeitpunkt, levels = c("Pre", "Post"))
dat_1_long$ID <- as.factor(dat_1_long$ID)
# Modelldefinition
contrasts(dat_1_long$Gruppe) <- contr.helmert(3)
M1 <- lm(SP_score ~ Gruppe * Zeitpunkt, data = dat_1_long)
# Schaetzung der Parameter
summary(M1)
# ANOVA zur Bestimmung der Quadratsummen für die beiden Prädiktoren
Anova(M1)
#setwd("Sitzungen")
dat_1 <- read.csv(file = "Dat_VR_Anxiety_lm4.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
# Characterstrings als Faktoren definieren
dat_1$Gruppe <- as.factor(dat_1$Gruppe)
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("Warteliste", "in_sensu", "in_virtuo"))
# Change berechnen
dat_1$Change <- dat_1$Post - dat_1$Pre
# Zentrierung des kontinuierlichen Praediktors Pre-Wert
dat_1$Pre_c <- as.vector(scale(dat_1$Pre, center = TRUE, scale = FALSE)) # dient der besseren Interpretierbarkeit
# Modelldefinition
M1 <- lm(Change ~ Pre_c + Gruppe, data = dat_1)
# Schaetzung der Parameter
summary(M1)
# Deskriptive Mittelwerte
describeBy(dat_1$Change, group = dat_1$Gruppe, data = dat_1, mat = TRUE)
# Geschätzte Mittelwerte
predmeans <- predictmeans(M1, "Gruppe", adj ="BH", barplot = TRUE)
predmeans
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("in_virtuo", "in_sensu", "Warteliste"))
contrasts(dat_1$Gruppe) <- contr.helmert(3)
contrasts(dat_1$Gruppe)
M2 <- lm(Change ~ Pre_c + Gruppe, data = dat_1)
summary(M2)
# Mittelwert Change overall
mean(dat_1$Change)
# Vorhergesagte Mittelwerte
pred.means2 <- predictmeans(M2, "Gruppe", adj ="BH", barplot = TRUE)
pred.means2
#| warning: false
library(ggplot2)
library(psych)
library(Hmisc)
library(car)
library(lmtest)
library(effectsize)
library(rcompanion)
library(tidyr)
library(predictmeans)
library(nlme)
library(ez)
#setwd("Sitzungen")
dat_1 <- read.csv(file = "BDI_1_ALM.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
# Characterstrings als Faktoren definieren
dat_1$Gruppe <- as.factor(dat_1$Gruppe)
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("Warteliste", "KVT"))
dat_1_long <- as.data.frame(pivot_longer(dat_1, cols = c(Pre, Post, Follow_up), names_to = "Zeitpunkt",
values_to = "BDI", values_drop_na = FALSE))
dat_1_long$Zeitpunkt <- as.factor(dat_1_long$Zeitpunkt)
dat_1_long$Zeitpunkt <- factor(dat_1_long$Zeitpunkt, levels = c("Pre", "Post", "Follow_up"))
dat_1_long$ID <- as.factor(dat_1_long$ID)
# BDI als Kriterium/outcome
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=BDI)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
facet_wrap(~Gruppe)+
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt N=200"))
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=BDI, group = ID)) +
facet_wrap(~Gruppe)+
geom_line(aes(color= ID), show.legend = FALSE) +
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt"))
## Wegen nicht möglicher Werte im BDI Daten bereinigen
dat_1_long_b <- subset(dat_1_long, BDI >= 0)
nrow(dat_1_long_b)
## Abbildungen ohne die nicht möglichen Werte
print(ggplot(dat_1_long_b, aes(x=Zeitpunkt, y=BDI)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
facet_wrap(~Gruppe)+
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt N=200"))
print(ggplot(dat_1_long_b, aes(x=Zeitpunkt, y=BDI, group = ID)) +
facet_wrap(~Gruppe)+
geom_line(aes(color= ID), show.legend = FALSE) +
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt"))
descriptives <- describeBy(BDI ~ Zeitpunkt + Gruppe, mat = TRUE, data = dat_1_long_b)
descriptives
#### Namen der Faktoren in Ergebnimatrix einfuegen
names(descriptives)[names(descriptives) == "group1"] <- "Zeitpunkt"
names(descriptives)[names(descriptives) == "group2"] <- "Bedingung"
#### Konfidenzintervall ausrechnen
descriptives$ci_95 <- descriptives$se*1.96
descriptives$Zeitpunkt <- factor(descriptives$Zeitpunkt, levels = c("Pre", "Post", "Follow_up"))
descriptives$Bedingung <- factor(descriptives$Bedingung, levels = c("Warteliste", "KVT"))
#### Graphik machen
pd <- position_dodge(0.3)
# pd zum Versetzen der Punkte der Mittelwert so dass diese sichtbar sind
ggplot(descriptives, aes(x=Zeitpunkt, y=mean, group = Bedingung)) +
ylim(0,40) +
geom_errorbar(width=.2, aes(ymin=mean-ci_95, ymax=mean+ci_95), position = pd) +
geom_point(aes(color = Bedingung), size=2, position = pd) +
geom_line(aes(linetype=Bedingung, color = Bedingung), position = pd) +
ggtitle("Mittelwerte plus/minus 95% Konfidenzintervall")+
theme_classic()
ezANOVA(within=Zeitpunkt, between=Gruppe, wid=ID, dv=BDI, data=dat_1_long)
# leider mag ezANOVA nicht den Datensatz, in dem die unmöglichen Werte gelöscht wurden, daher der komplette Datensatz
# Mit Trendkontrasten für Faktor Zeitpunkt
###############################################
dat_1_long_b$Zeitpunkt = factor(dat_1_long_b$Zeitpunkt, levels=c("Pre", "Post", "Follow_up"))
contrasts(dat_1_long_b$Zeitpunkt) <- contr.poly(3)
contrasts(dat_1_long_b$Zeitpunkt)
# Modelldefinition
M1 <- lme(BDI ~ Gruppe * Zeitpunkt, random = ~1|ID, data = dat_1_long_b)
summary(M1)
Anova(M1)
# Vorhergesagte Mittelwerte
predmeans <- predictmeans(M1, "Gruppe:Zeitpunkt", adj ="BH", barplot = TRUE)
predmeans
predmeans$predictmeansBarPlot
# Residuen
densityplot(residuals(M1, type = "normalized"))
## Normalisierung ist wichtig, damit Abhängigkeiten richtig berücksichtigt werden
# Abspeichern der Residuen und fitted values in Vektoren
res.vec <- residuals(M1, type = "normalized")
fit.vec <- M1$fitted[,1]
# Scatterplot machen für Verteilung in den 6 Bedingungen
scatterplot(res.vec ~ fit.vec)
# Scatterplot für Residuen unter Berücksichtigung des random intercept
plot(M1)
# Mit Helmertkontrasten für Faktor Zeitpunkt
###############################################
dat_1_long_b$Zeitpunkt = factor(dat_1_long_b$Zeitpunkt, levels=c("Follow_up", "Post", "Pre"))
contrasts(dat_1_long_b$Zeitpunkt) <- contr.helmert(3)
contrasts(dat_1_long_b$Zeitpunkt)
# Modelldefinition
M1_helm <- lme(BDI ~ Gruppe * Zeitpunkt, random = ~1|ID, data = dat_1_long_b)
summary(M1_helm)
Anova(M1_helm)
# Residuen
densityplot(residuals(M1_helm, type = "normalized"))
## Normalisierung ist wichtig, damit Abhängigkeiten richtig berücksichtigt werden
# Abspeichern der Residuen und fitted values in Vektoren
res.vec2 <- residuals(M1_helm, type = "normalized")
fit.vec2 <- M1_helm$fitted[,1]
# Scatterplot machen für Verteilung in den 6 Bedingungen
scatterplot(res.vec2 ~ fit.vec2)
# Scatterplot für Residuen unter Berücksichtigung des random intercept
plot(M1_helm)
dat_Warteliste <- subset(dat_1_long_b, Gruppe == "Warteliste")
dat_KVT <- subset(dat_1_long_b, Gruppe == "KVT")
## Warteliste
dat_Warteliste$Zeitpunkt <- factor(dat_Warteliste$Zeitpunkt, levels = c("Pre", "Post", "Follow_up"))
contrasts(dat_Warteliste$Zeitpunkt) <- contr.poly(3)
M2 <- lme(BDI ~ Zeitpunkt, random = ~1|ID, data = dat_Warteliste)
summary(M2)
## KVT
contrasts(dat_KVT$Zeitpunkt) <- contr.helmert(3)
contrasts(dat_KVT$Zeitpunkt)
M3 <- lme(BDI ~ Zeitpunkt, random = ~1|ID, data = dat_KVT)
summary(M3)
#| warning: false
library(ggplot2)
library(psych)
library(Hmisc)
library(car)
library(lmtest)
library(effectsize)
library(rcompanion)
library(tidyr)
library(predictmeans)
library(nlme)
library(ez)
#setwd("Sitzungen")
dat_1 <- read.csv(file = "BDI_1_ALM.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
setwd("Sitzungen")
#setwd("Sitzungen")
dat_1 <- read.csv(file = "BDI_1_ALM.csv", header = TRUE, sep = ",", dec = ".", na.strings = "NA")
# Characterstrings als Faktoren definieren
dat_1$Gruppe <- as.factor(dat_1$Gruppe)
dat_1$Gruppe <- factor(dat_1$Gruppe, levels = c("Warteliste", "KVT"))
dat_1_long <- as.data.frame(pivot_longer(dat_1, cols = c(Pre, Post, Follow_up), names_to = "Zeitpunkt",
values_to = "BDI", values_drop_na = FALSE))
dat_1_long$Zeitpunkt <- as.factor(dat_1_long$Zeitpunkt)
dat_1_long$Zeitpunkt <- factor(dat_1_long$Zeitpunkt, levels = c("Pre", "Post", "Follow_up"))
dat_1_long$ID <- as.factor(dat_1_long$ID)
# BDI als Kriterium/outcome
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=BDI)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
facet_wrap(~Gruppe)+
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt N=200"))
print(ggplot(dat_1_long, aes(x=Zeitpunkt, y=BDI, group = ID)) +
facet_wrap(~Gruppe)+
geom_line(aes(color= ID), show.legend = FALSE) +
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt"))
## Wegen nicht möglicher Werte im BDI Daten bereinigen
dat_1_long_b <- subset(dat_1_long, BDI >= 0)
nrow(dat_1_long_b)
## Abbildungen ohne die nicht möglichen Werte
print(ggplot(dat_1_long_b, aes(x=Zeitpunkt, y=BDI)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
facet_wrap(~Gruppe)+
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt N=200"))
print(ggplot(dat_1_long_b, aes(x=Zeitpunkt, y=BDI, group = ID)) +
facet_wrap(~Gruppe)+
geom_line(aes(color= ID), show.legend = FALSE) +
ylab("Score BDI 2") +
xlab("Zeitpunkt") +
ggtitle("Depression in Abhängigkeit von Behandlung und Zeitpunkt"))
