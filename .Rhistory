addIntercept = nrow(pe[pe$op == "~1",]) > 0 && showInt
regressions = pe[pe$op == "~",]
factors = pe[pe$op == "=~",]
covariances = pe[pe$op == "~~" & pe$lhs != pe$rhs,]
variances = pe[pe$op == "~~" & pe$lhs == pe$rhs,]
if(is.na(constrainInt)) constrainInt = nrow(regressions) + nrow(factors) > 5
vizStr = paste0(
"digraph{",
if (!verticalFlow) "LR",
"node[penwidth=2];",
ifelse(addIntercept, "subgraph{rank=source;node[shape=triangle];1;}", ""),
"node[shape=box]",
paste0(nodeNames[!isFactor], ";", collapse="", recycle0=T),
"node[shape=circle];",
paste0(nodeNames[isFactor == T], ";", collapse="", recycle0=T),
"edge[minlen=2,constraint=",
ifelse(constrainInt, "true", "false"),
"];",
ifelse(addIntercept, paste0("1->", pe[pe$op == "~1",]$lhs, ";", collapse="", recycle0 = T), ""),
"edge[constraint=true];",
generateEdges(regressions, showPar=showPar, showSignif=showSignif),
"edge[dir=back];",
generateEdges(factors, showPar=showPar, showSignif=showSignif),
"edge[dir=both,constraint=false];",
ifelse(showCov, generateEdges(covariances, showPar=showPar, showSignif=showSignif), ""),
ifelse(showVar, generateEdges(variances, showPar=showPar, showSignif=showSignif, startDir="s"), ""),
"}"
)
grViz(vizStr)
}
SEMgraph(cfa2fit, verticalFlow=FALSE)
SEMgraph(cfa2fit, verticalFlow=FALSE)
SEMgraph = function(lavaanFit, showPar=TRUE, showSignif=TRUE, showCov=TRUE, showInt=TRUE, showVar=FALSE, filterPhant=TRUE, constrainInt=NA, verticalFlow=TRUE) {
generateEdges = function(perows, showPar=T, showSignif=T, startDir=F, endDir=T) {
if(endDir == T) {
endDir = startDir
}
hasStartPort = startDir != F
hasEndPort = endDir != F
makeBold = showPar & showSignif & !is.na(perows$stars) & perows$stars != ""
hasLabel = perows$label != ""
if(length(hasLabel) == 0) hasLabel = F
showEstimate = showPar & !is.na(perows$stars)
paste0(
perows$rhs, ifelse(hasStartPort, paste0(":", startDir), ""), "->",
perows$lhs, ifelse(hasEndPort, paste0(":", endDir), ""),
"[label=",
ifelse(makeBold, "< <b>", "' "),
ifelse(hasLabel, paste0(perows$label, ifelse(showEstimate, " (", "")), ""),
ifelse(showEstimate, paste0(
format(round(perows$est, 3), nsmall=3, trim=T),
perows$stars
), ""),
ifelse(showEstimate & hasLabel, ")", ""),
ifelse(makeBold, "</b>>", "'"), "]",
";",
collapse="", recycle0 = T)
}
pe = parameterEstimates(lavaanFit)
fd = pe[pe$op == "=~",]
pe = pe[!pe$op == "=~" & (!is.na(pe$z) | pe$op == "~"),]
# Filter phantom latents
if(filterPhant) {
for(f in unique(fd$lhs)) {
if(nrow(fd[fd$lhs == f,]) == 1) {
fd = fd[fd$lhs != f,]
}
}
}
pe = rbind(fd, pe)
pe$stars = ifelse(pe$pvalue < 0.001, "***", ifelse(pe$pvalue < 0.01, "**", ifelse(pe$pvalue < 0.05, "*", "")))
nodeNames = unique(c(pe$lhs, pe$rhs))
nodeNames = nodeNames[nodeNames != ""]
isFactor = rep(0, length(nodeNames))
for(i in 1:length(nodeNames)) {
isFactor[i] = nrow(pe[pe$op == "=~" & pe$lhs == nodeNames[i],]) > 0
}
addIntercept = nrow(pe[pe$op == "~1",]) > 0 && showInt
regressions = pe[pe$op == "~",]
factors = pe[pe$op == "=~",]
covariances = pe[pe$op == "~~" & pe$lhs != pe$rhs,]
variances = pe[pe$op == "~~" & pe$lhs == pe$rhs,]
if(is.na(constrainInt)) constrainInt = nrow(regressions) + nrow(factors) > 5
vizStr = paste0(
"digraph{",
if (!verticalFlow) "rankdir=LR;",
"node[penwidth=2];",
ifelse(addIntercept, "subgraph{rank=source;node[shape=triangle];1;}", ""),
"node[shape=box]",
paste0(nodeNames[!isFactor], ";", collapse="", recycle0=T),
"node[shape=circle];",
paste0(nodeNames[isFactor == T], ";", collapse="", recycle0=T),
"edge[minlen=2,constraint=",
ifelse(constrainInt, "true", "false"),
"];",
ifelse(addIntercept, paste0("1->", pe[pe$op == "~1",]$lhs, ";", collapse="", recycle0 = T), ""),
"edge[constraint=true];",
generateEdges(regressions, showPar=showPar, showSignif=showSignif),
"edge[dir=back];",
generateEdges(factors, showPar=showPar, showSignif=showSignif),
"edge[dir=both,constraint=false];",
ifelse(showCov, generateEdges(covariances, showPar=showPar, showSignif=showSignif), ""),
ifelse(showVar, generateEdges(variances, showPar=showPar, showSignif=showSignif, startDir="s"), ""),
"}"
)
grViz(vizStr)
}
SEMgraph(cfa2fit, verticalFlow=FALSE)
library(lavaan)
source("Sitzungen/SEMgraph.R")
dat = read.table("Sitzungen/SleepMWBScored.dat", header=TRUE)
dat = read.csv("Sitzungen/SleepMWBScored.csv")
clpm = '
# 1. Latente Variablen
sleep1 =~ fssleep1
sleep2 =~ fssleep2
sleep3 =~ fssleep3
sleep4 =~ fssleep4
mwb1 =~ fsmwb1
mwb2 =~ fsmwb2
mwb3 =~ fsmwb3
mwb4 =~ fsmwb4
# 1. Autoregression
sleep2 ~ a1 * sleep1
sleep3 ~ a1 * sleep2
sleep4 ~ a1 * sleep3
mwb2 ~ a2 * mwb1
mwb3 ~ a2 * mwb2
mwb4 ~ a2 * mwb3
# 2. Kreuzregression
mwb2 ~ c1 * sleep1
mwb3 ~ c1 * sleep2
mwb4 ~ c1 * sleep3
sleep2 ~ c2 * mwb1
sleep3 ~ c2 * mwb2
sleep4 ~ c2 * mwb3
# 3. Kovarianzen
sleep1 ~~ cov1 * mwb1
sleep2 ~~ cov2 * mwb2
sleep3 ~~ cov2 * mwb3
sleep4 ~~ cov2 * mwb4
# 4. Intercepts
fssleep1 ~ 0 * 1
fssleep2 ~ 0 * 1
fssleep3 ~ 0 * 1
fssleep4 ~ 0 * 1
fsmwb1 ~ 0 * 1
fsmwb2 ~ 0 * 1
fsmwb3 ~ 0 * 1
fsmwb4 ~ 0 * 1
# 5. Varianzen
fssleep1 ~~ 0 * fssleep1
fssleep2 ~~ 0 * fssleep2
fssleep3 ~~ 0 * fssleep3
fssleep4 ~~ 0 * fssleep4
fsmwb1 ~~ 0 * fsmwb1
fsmwb2 ~~ 0 * fsmwb2
fsmwb3 ~~ 0 * fsmwb3
fsmwb4 ~~ 0 * fsmwb4
'
clpmfit = sem(clpm, dat)
summary(clpmfit, fit.measures=TRUE)
SEMgraph(clpmfit, showPar=FALSE)
SEMgraph = function(lavaanFit, showPar=TRUE, showSignif=TRUE, showCov=TRUE, showInt=TRUE, showVar=FALSE, filterPhant=TRUE, constrainInt=NA, verticalFlow=TRUE) {
generateEdges = function(perows, showPar=T, showSignif=T, startDir=F, endDir=T) {
if(endDir == T) {
endDir = startDir
}
hasStartPort = startDir != F
hasEndPort = endDir != F
makeBold = showPar & showSignif & !is.na(perows$stars) & perows$stars != ""
hasLabel = perows$label != ""
if(length(hasLabel) == 0) hasLabel = F
showEstimate = showPar & !is.na(perows$stars)
paste0(
perows$rhs, ifelse(hasStartPort, paste0(":", startDir), ""), "->",
perows$lhs, ifelse(hasEndPort, paste0(":", endDir), ""),
"[label=",
ifelse(makeBold, "< <b>", "' "),
ifelse(hasLabel, paste0(perows$label, ifelse(showEstimate, " (", "")), ""),
ifelse(showEstimate, paste0(
format(round(perows$est, 3), nsmall=3, trim=T),
perows$stars
), ""),
ifelse(showEstimate & hasLabel, ")", ""),
ifelse(makeBold, "</b>>", "'"), "]",
";",
collapse="", recycle0 = T)
}
pe = parameterEstimates(lavaanFit)
pe = pe[!is.na(pe$z) | pe$op %in% c("~", "=~"),]
pe$stars = ifelse(pe$pvalue < 0.001, "***", ifelse(pe$pvalue < 0.01, "**", ifelse(pe$pvalue < 0.05, "*", "")))
nodeNames = unique(c(pe$lhs, pe$rhs))
nodeNames = nodeNames[nodeNames != ""]
isFactor = rep(0, length(nodeNames))
for(i in 1:length(nodeNames)) {
isFactor[i] = nrow(pe[pe$op == "=~" & pe$lhs == nodeNames[i],]) > 0
}
fd = pe[pe$op == "=~",]
pe = pe[!pe$op == "=~",]
# Filter phantom latents
if(filterPhant) {
for(f in unique(fd$lhs)) {
if(nrow(fd[fd$lhs == f,]) == 1) {
fd = fd[fd$lhs != f,]
}
}
}
pe = rbind(fd, pe)
addIntercept = nrow(pe[pe$op == "~1",]) > 0 && showInt
regressions = pe[pe$op == "~",]
factors = pe[pe$op == "=~",]
covariances = pe[pe$op == "~~" & pe$lhs != pe$rhs,]
variances = pe[pe$op == "~~" & pe$lhs == pe$rhs,]
if(is.na(constrainInt)) constrainInt = nrow(regressions) + nrow(factors) > 5
vizStr = paste0(
"digraph{",
if (!verticalFlow) "rankdir=LR;",
"node[penwidth=2];",
ifelse(addIntercept, "subgraph{rank=source;node[shape=triangle];1;}", ""),
"node[shape=box]",
paste0(nodeNames[!isFactor], ";", collapse="", recycle0=T),
"node[shape=circle];",
paste0(nodeNames[isFactor == T], ";", collapse="", recycle0=T),
"edge[minlen=2,constraint=",
ifelse(constrainInt, "true", "false"),
"];",
ifelse(addIntercept, paste0("1->", pe[pe$op == "~1",]$lhs, ";", collapse="", recycle0 = T), ""),
"edge[constraint=true];",
generateEdges(regressions, showPar=showPar, showSignif=showSignif),
"edge[dir=back];",
generateEdges(factors, showPar=showPar, showSignif=showSignif),
"edge[dir=both,constraint=false];",
ifelse(showCov, generateEdges(covariances, showPar=showPar, showSignif=showSignif), ""),
ifelse(showVar, generateEdges(variances, showPar=showPar, showSignif=showSignif, startDir="s"), ""),
"}"
)
grViz(vizStr)
}
SEMgraph(clpmfit, showPar=FALSE)
SEMgraph = function(lavaanFit, showPar=TRUE, showSignif=TRUE, showCov=TRUE, showInt=TRUE, showVar=FALSE, filterPhant=TRUE, constrainInt=NA, verticalFlow=TRUE) {
generateEdges = function(perows, showPar=T, showSignif=T, startDir=F, endDir=T) {
if(endDir == T) {
endDir = startDir
}
hasStartPort = startDir != F
hasEndPort = endDir != F
makeBold = showPar & showSignif & !is.na(perows$stars) & perows$stars != ""
hasLabel = perows$label != ""
if(length(hasLabel) == 0) hasLabel = F
showEstimate = showPar & !is.na(perows$stars)
paste0(
perows$rhs, ifelse(hasStartPort, paste0(":", startDir), ""), "->",
perows$lhs, ifelse(hasEndPort, paste0(":", endDir), ""),
"[label=",
ifelse(makeBold, "< <b>", "' "),
ifelse(hasLabel, paste0(perows$label, ifelse(showEstimate, " (", "")), ""),
ifelse(showEstimate, paste0(
format(round(perows$est, 3), nsmall=3, trim=T),
perows$stars
), ""),
ifelse(showEstimate & hasLabel, ")", ""),
ifelse(makeBold, "</b>>", "'"), "]",
";",
collapse="", recycle0 = T)
}
pe = parameterEstimates(lavaanFit)
fd = pe[pe$op == "=~",]
pe = pe[!pe$op == "=~" & (!is.na(pe$z) | pe$op == "~"),]
# Filter phantom latents
filteredLatents = c()
if(filterPhant) {
for(f in unique(fd$lhs)) {
if(nrow(fd[fd$lhs == f,]) == 1) {
filteredLatents = c(filteredLatents, f)
fd = fd[fd$lhs != f,]
}
}
}
pe = rbind(fd, pe)
pe$stars = ifelse(pe$pvalue < 0.001, "***", ifelse(pe$pvalue < 0.01, "**", ifelse(pe$pvalue < 0.05, "*", "")))
nodeNames = unique(c(pe$lhs, pe$rhs))
nodeNames = nodeNames[nodeNames != ""]
isFactor = rep(0, length(nodeNames))
for(i in 1:length(nodeNames)) {
isFactor[i] = nrow(pe[pe$op == "=~" & pe$lhs == nodeNames[i],]) > 0 | nodeNames[i] %in% filteredLatents
}
addIntercept = nrow(pe[pe$op == "~1",]) > 0 && showInt
regressions = pe[pe$op == "~",]
factors = pe[pe$op == "=~",]
covariances = pe[pe$op == "~~" & pe$lhs != pe$rhs,]
variances = pe[pe$op == "~~" & pe$lhs == pe$rhs,]
if(is.na(constrainInt)) constrainInt = nrow(regressions) + nrow(factors) > 5
vizStr = paste0(
"digraph{",
if (!verticalFlow) "rankdir=LR;",
"node[penwidth=2];",
ifelse(addIntercept, "subgraph{rank=source;node[shape=triangle];1;}", ""),
"node[shape=box]",
paste0(nodeNames[!isFactor], ";", collapse="", recycle0=T),
"node[shape=circle];",
paste0(nodeNames[isFactor == T], ";", collapse="", recycle0=T),
"edge[minlen=2,constraint=",
ifelse(constrainInt, "true", "false"),
"];",
ifelse(addIntercept, paste0("1->", pe[pe$op == "~1",]$lhs, ";", collapse="", recycle0 = T), ""),
"edge[constraint=true];",
generateEdges(regressions, showPar=showPar, showSignif=showSignif),
"edge[dir=back];",
generateEdges(factors, showPar=showPar, showSignif=showSignif),
"edge[dir=both,constraint=false];",
ifelse(showCov, generateEdges(covariances, showPar=showPar, showSignif=showSignif), ""),
ifelse(showVar, generateEdges(variances, showPar=showPar, showSignif=showSignif, startDir="s"), ""),
"}"
)
grViz(vizStr)
}
SEMgraph(clpmfit, showPar=FALSE)
SEMgraph(clpmfit)
clpmri = '
# 1. Latente Variablen
sleep1 =~ 1 * fssleep1
sleep2 =~ 1 * fssleep2
sleep3 =~ 1 * fssleep3
sleep4 =~ 1 * fssleep4
mwb1 =~ 1 * fsmwb1
mwb2 =~ 1 * fsmwb2
mwb3 =~ 1 * fsmwb3
mwb4 =~ 1 * fsmwb4
isleep =~ 1 * sleep1 + 1 * sleep2 + 1 * sleep3 + 1 * sleep4
imwb =~ 1 * mwb1 + 1 * mwb2 + 1 * mwb3 + 1 * mwb4
# 2. Autoregression
sleep2 ~ a1 * sleep1
sleep3 ~ a1 * sleep2
sleep4 ~ a1 * sleep3
mwb2 ~ a2 * mwb1
mwb3 ~ a2 * mwb2
mwb4 ~ a2 * mwb3
# 3. Kreuzregression
mwb2 ~ c1 * sleep1
mwb3 ~ c1 * sleep2
mwb4 ~ c1 * sleep3
sleep2 ~ c2 * mwb1
sleep3 ~ c2 * mwb2
sleep4 ~ c2 * mwb3
# 4. Kovarianzen
sleep1 ~~ cov1 * mwb1
sleep2 ~~ cov2 * mwb2
sleep3 ~~ cov2 * mwb3
sleep4 ~~ cov2 * mwb4
isleep ~~ covi*imwb
sleep1 ~~ 0 * isleep
mwb1 ~~ 0 * isleep
sleep1 ~~ 0 * imwb
mwb1 ~~ 0 * imwb
# 5. Intercepts
fssleep1 ~ 0 * 1
fssleep2 ~ 0 * 1
fssleep3 ~ 0 * 1
fssleep4 ~ 0 * 1
fsmwb1 ~ 0 * 1
fsmwb2 ~ 0 * 1
fsmwb3 ~ 0 * 1
fsmwb4 ~ 0 * 1
isleep ~ 1
imwb ~ 1
'
clpmrifit = sem(clpmri, dat)
summary(clpmrifit, fit.measures=TRUE)
SEMgraph(clpmrifit, showPar=FALSE)
summary(clpmfit, fit.measures=TRUE)
# 5. Varianzen
#fssleep1 ~~ 0 * fssleep1
#fssleep2 ~~ 0 * fssleep2
#fssleep3 ~~ 0 * fssleep3
#fssleep4 ~~ 0 * fssleep4
#fsmwb1 ~~ 0 * fsmwb1
#fsmwb2 ~~ 0 * fsmwb2
#fsmwb3 ~~ 0 * fsmwb3
#fsmwb4 ~~ 0 * fsmwb4
# 5. Varianzen
#fssleep1 ~~ 0 * fssleep1
#fssleep2 ~~ 0 * fssleep2
#fssleep3 ~~ 0 * fssleep3
#fssleep4 ~~ 0 * fssleep4
#fsmwb1 ~~ 0 * fsmwb1
#fsmwb2 ~~ 0 * fsmwb2
#fsmwb3 ~~ 0 * fsmwb3
#fsmwb4 ~~ 0 * fsmwb4
'
clpmfit = sem(clpm, dat)
summary(clpmfit, fit.measures=TRUE)
)
))
;
''
'
clpm = '
clpm = '
# 1. Latente Variablen
sleep1 =~ fssleep1
sleep2 =~ fssleep2
sleep3 =~ fssleep3
sleep4 =~ fssleep4
mwb1 =~ fsmwb1
mwb2 =~ fsmwb2
mwb3 =~ fsmwb3
mwb4 =~ fsmwb4
# 1. Autoregression
sleep2 ~ a1 * sleep1
sleep3 ~ a1 * sleep2
sleep4 ~ a1 * sleep3
mwb2 ~ a2 * mwb1
mwb3 ~ a2 * mwb2
mwb4 ~ a2 * mwb3
# 2. Kreuzregression
mwb2 ~ c1 * sleep1
mwb3 ~ c1 * sleep2
mwb4 ~ c1 * sleep3
sleep2 ~ c2 * mwb1
sleep3 ~ c2 * mwb2
sleep4 ~ c2 * mwb3
# 3. Kovarianzen
sleep1 ~~ cov1 * mwb1
sleep2 ~~ cov2 * mwb2
sleep3 ~~ cov2 * mwb3
sleep4 ~~ cov2 * mwb4
# 4. Intercepts
fssleep1 ~ 0 * 1
fssleep2 ~ 0 * 1
fssleep3 ~ 0 * 1
fssleep4 ~ 0 * 1
fsmwb1 ~ 0 * 1
fsmwb2 ~ 0 * 1
fsmwb3 ~ 0 * 1
fsmwb4 ~ 0 * 1
# 5. Varianzen
#fssleep1 ~~ 0 * fssleep1
#fssleep2 ~~ 0 * fssleep2
#fssleep3 ~~ 0 * fssleep3
#fssleep4 ~~ 0 * fssleep4
#fsmwb1 ~~ 0 * fsmwb1
#fsmwb2 ~~ 0 * fsmwb2
#fsmwb3 ~~ 0 * fsmwb3
#fsmwb4 ~~ 0 * fsmwb4
'
clpmfit = sem(clpm, dat)
summary(clpmfit, fit.measures=TRUE)
SEMgraph(clpmfit, showPar=FALSE)
'
clpm = '
# 1. Latente Variablen
sleep1 =~ fssleep1
sleep2 =~ fssleep2
sleep3 =~ fssleep3
sleep4 =~ fssleep4
mwb1 =~ fsmwb1
mwb2 =~ fsmwb2
mwb3 =~ fsmwb3
mwb4 =~ fsmwb4
# 1. Autoregression
sleep2 ~ a1 * sleep1
sleep3 ~ a1 * sleep2
sleep4 ~ a1 * sleep3
mwb2 ~ a2 * mwb1
mwb3 ~ a2 * mwb2
mwb4 ~ a2 * mwb3
# 2. Kreuzregression
mwb2 ~ c1 * sleep1
mwb3 ~ c1 * sleep2
mwb4 ~ c1 * sleep3
sleep2 ~ c2 * mwb1
sleep3 ~ c2 * mwb2
sleep4 ~ c2 * mwb3
# 3. Kovarianzen
sleep1 ~~ cov1 * mwb1
sleep2 ~~ cov2 * mwb2
sleep3 ~~ cov2 * mwb3
sleep4 ~~ cov2 * mwb4
# 4. Intercepts
fssleep1 ~ 0 * 1
fssleep2 ~ 0 * 1
fssleep3 ~ 0 * 1
fssleep4 ~ 0 * 1
fsmwb1 ~ 0 * 1
fsmwb2 ~ 0 * 1
fsmwb3 ~ 0 * 1
fsmwb4 ~ 0 * 1
# 5. Varianzen
#fssleep1 ~~ 0 * fssleep1
#fssleep2 ~~ 0 * fssleep2
#fssleep3 ~~ 0 * fssleep3
#fssleep4 ~~ 0 * fssleep4
#fsmwb1 ~~ 0 * fsmwb1
#fsmwb2 ~~ 0 * fsmwb2
#fsmwb3 ~~ 0 * fsmwb3
#fsmwb4 ~~ 0 * fsmwb4
'
clpmfit = sem(clpm, dat)
summary(clpmfit, fit.measures=TRUE)
SEMgraph(clpmfit, showPar=FALSE)
is.na(NULL)
is.null(NA)
t = c(1,2,3,4)
t[3] = NULL
t[3,] = NULL
t = matrix(nrow=4, ncol=4)
t[1, ] = NULL
t[1, ] = NA
t = matrix(1, nrow=4, ncol=4)
t[1, ] = NA
?colnames()
