dat = dat[sample(1:nrow(dat)), ]
dat$subjectNr = 1:nrow(dat)
dat = data.frame(gender, home, visited, alcohol, weight)
weight = 70 + rnorm(100, 0, 10) + (gender == 2) * 15
dat = data.frame(gender, home, visited, alcohol, weight)
dat = dat[sample(1:nrow(dat)), ]
dat$subjectNr = 1:nrow(dat)
write.csv(dat, "consumption_ophase.csv", row.names=F)
rm(gender, home, visited, alcohol, weight)
dat = read.csv("consumption_ophase.csv")
dat$gender = factor(dat$gender, levels=1:4, labels=c("weiblich", "männlich", "divers", "keine Angabe"))
dat$home = factor(dat$home, levels=1:2, labels=c("Norden", "Süden"))
# Einfaches scatterplot zwei kontinuierlichen Variablen
ggplot(dat, aes(x = weight, y = alcohol)) +
geom_point()
# Zusaetzlich Faktor "Zylinder" als dritte Variable
p = ggplot(mpg, aes(displ, hwy, colour = cyl)) +
geom_point()
p
# Zusaetzlich Faktor "Zylinder" als dritte Variable
p = ggplot(dat, aes(weight, alcohol, colour = home)) +
geom_point()
p
# Mit Achsenbezeichnungen und Titel
p = p +
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
# Mit Linie für Zusammenhang mit geom_smooth
## wird automatisch für jede Gruppe getrennt gemacht
p +
geom_smooth()
# Mit Regressionsline für linearen Zusammenhang mit geom_smooth
p +
geom_smooth(method = "lm")
# Aufteilung in verschiedene Graphiken anhand eines dritten Faktors mit facet_wrap
## Faktor Fahrzeugklasse
ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_wrap(~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
# Einfügen zusaetzlicher, sekundaerer Achsen um die Facets zu bezeichnen
p = p +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Antrieb", breaks = NULL, labels = NULL)) +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Zylinder", breaks = NULL, labels = NULL))
p
# Einfügen zusaetzlicher, sekundaerer Achsen um die Facets zu bezeichnen
p = p +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Home", breaks = NULL, labels = NULL)) +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Gender", breaks = NULL, labels = NULL))
p
dat$gender = factor(dat$gender, levels=1:4, labels=c("female", "male", "diverse", "no answer"))
dat$home = factor(dat$home, levels=1:2, labels=c("North", "South"))
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
library(ggplot2)
setwd("Vorkurs")
setwd("Vorkurs")
setwd("Vorkurs")
dat = read.csv("consumption_ophase.csv")
dat$gender = factor(dat$gender, levels=1:4, labels=c("female", "male", "diverse", "no answer"))
dat$home = factor(dat$home, levels=1:2, labels=c("North", "South"))
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
dat$home = factor(dat$home, levels=1:2, labels=c("north", "south"))
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
dat = read.csv("consumption_ophase.csv")
dat$gender = factor(dat$gender, levels=1:4, labels=c("female", "male", "diverse", "no answer"))
dat$home = factor(dat$home, levels=1:2, labels=c("north", "south"))
# Aufteilung in verschiedene Graphiken anhand zweier Faktoren mit facet_grid
## Faktoren Antrieb = drv und Zylinder = cyl
p = ggplot(dat, aes(weight, alcohol)) +
geom_point() +
facet_grid(home~gender)+
labs(x = "Weight in kg", y = "Alcohol consumption in l") +
ggtitle("Relationship between weight and alcohol consumption")
p
# Einfügen zusaetzlicher, sekundaerer Achsen um die Facets zu bezeichnen
p = p +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Home", breaks = NULL, labels = NULL)) +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Gender", breaks = NULL, labels = NULL))
p
getwd()
??describeBy
```{r}
ggplot(dat, aes(alcohol)) + geom_histogram() + facet_wrap(~gender)
ggplot(dat, aes(alcohol)) + geom_bar() + facet_wrap(~gender) + labs(x = "Alcohol consumption in l", y = "Count") + ggtitle("Alcohol consumption by gender") + ylim(0,25)
ggplot(dat, aes(alcohol)) + geom_bar() + facet_wrap(~gender) + labs(x = "Alcohol consumption in l", y = "Count") + ggtitle("Alcohol consumption by gender") + ylim(0,10)
ggplot(dat, aes(home, visited)) +
geom_jitter(width = 0.2, height = 0)
ggplot(mpg, aes(drv, hwy)) + geom_violin() + geom_point() + geom_jitter(width = 0.2, height = 0)
ggplot(dat, aes(home, visitd)) + geom_violin() + geom_point() + geom_jitter(width = 0.2, height = 0)
ggplot(dat, aes(home, visited)) + geom_violin() + geom_point() + geom_jitter(width = 0.2, height = 0)
# Mit violin plot und Mittelwert mit Fehlerbalken
ggplot(dat, aes(home, visited)) + geom_violin() + geom_point() +
geom_jitter(width = 0.2, height = 0) +
geom_point(stat="summary",fun = mean,size=1.5, col = "red") +
stat_summary(geom="errorbar", fun.data=mean_se, width=.2, col ="red")+
theme_classic()
descriptives <- describeBy(visited ~ home, mat = TRUE, data = dat)
library(psych)
descriptives <- describeBy(visited ~ home, mat = TRUE, data = dat)
#### Name des Faktors einfügen
names(descriptives)[names(descriptives) == "group1"] <- "home"
#### Konfidenzintervall ausrechnen
descriptives$ci_95 <- descriptives$se*1.96
#### Graphik machen
ggplot(descriptives, aes(x=home, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=mean-ci_95, ymax=mean+ci_95), width=.1)+
ggtitle("Visited events by home")+
theme_classic()
ggplot(dat, aes(home, visited)) +
stat_summary(fun = mean, geom = "bar", fill = "dark blue") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=.3)+
ggtitle("Visited events by home")+
theme_classic()
pd <- position_dodge(1) # setzt die Balken nebeneinander
ggplot(dat, aes(home, visited, fill = gender)) +
stat_summary(fun = mean, geom = "bar", position = pd, preserve = "single") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=.3, position = pd, preserve = "single")+
ggtitle("Visited events by home")+
theme_classic()
?stat_summary
pd <- position_dodge(1, preserve = "single") # setzt die Balken nebeneinander
ggplot(dat, aes(home, visited, fill = gender)) +
stat_summary(fun = mean, geom = "bar", position = pd, preserve = "single") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=.3, position = pd, preserve = "single")+
ggtitle("Visited events by home")+
theme_classic()
ggplot(dat, aes(home, visited, color = gender)) +
stat_summary(fun = mean, geom = "point") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=.3)+
ggtitle("Visited events by home and gender")+
theme_classic()
pd <- position_dodge(0.4)
ggplot(dat, aes(home, visited, color = gender)) +
stat_summary(fun = mean, geom = "point", position=pd) +
stat_summary(fun.data = mean_se, geom = "errorbar", position=pd, width=.3)+
ggtitle("Visited events by home and gender")+
theme_classic()
test = 1:5
attr(test[2], "Trollen") = "Ja"
test
test[2]
attr(test, "Trollen") = "Ja"
test
rm(test)
??cohen.d
getwd()
dat = read.csv("motivation_precourse.csv")
dat$precourse = as.factor(dat$precourse)
ggplot(dat, aes(precourse, mot_post)) +
geom_violin() +
geom_jitter(width = 0.3, height = 0, col = "grey", size = 0.5) +
stat_summary(fun = mean, geom = "point", size = 2, col = "red")  +
stat_summary(geom="errorbar", fun.data=mean_cl_normal, width=.1, col ="red")+
ylim(0,10) +
ylab("Motivation score") +
xlab("Precourse") +
ggtitle("Motivation after precourse")
model = lm(mot_post ~ precourse, data=dat)
?durbinWatsonTest
??durbinWatsonTest
library(car)
?durbinWatsonTest
## Verteilung der Residuen
densityPlot(model$residuals)
plotNormalDensity(model$residuals)
??plotNormalDensity
install.packages("rcompanion")
library(car)
library(rcompanion)
plotNormalDensity(model$residuals)
## Verteilung der Residuen in Abhängigkeit von vorhergesagten Werten
scatterplot(model$residuals ~ model$fitted.values)
summary(model)
## Statistischer Test auf Homoskedastizität: Breusch-Pagan Test
bptest(model)
??bptest
library(lmtest)
## Statistischer Test auf Homoskedastizität: Breusch-Pagan Test
bptest(model)
durbinWatsonTest(Model) # Test für eine Autokorrelation 1.Ordnung
durbinWatsonTest(model) # Test für eine Autokorrelation 1.Ordnung
summary(model)
library(ggplot2)
library(psych)
library(car)
library(rcompanion)
library(lmtest)
setwd("C:/Users/bente/Documents/Studium/BachelorPsychologie/Projekte/KlinMethGoettingen/Vorkurs")
dat = read.csv("motivation_precourse.csv")
dat$precourse = as.factor(dat$precourse)
library(ggplot2)
setwd("C:/Users/bente/Documents/Studium/BachelorPsychologie/Projekte/KlinMethGoettingen/Vorkurs")
dat = read.csv("laune.csv")
dat_l = pivot_longer(dat, cols=c("pre", "post"), names_to="time", values_to="mood")
#install.packages("tidyr")
library(tidyr)
library(psych)
library(ggplot2)
dat_l = pivot_longer(dat, cols=c("pre", "post"), names_to="time", values_to="mood")
dat_l$mood_r = 6 - dat_l$mood
ggplot(dat_l, aes(mood_r)) +
geom_bar() +
facet_wrap(~time) +
labs(x = "Mood-Score", y = "Count", title="Counts of Mood-Scores") +
ylim(0,10)
ggplot(dat_l, aes(mood_r)) +
geom_bar() +
facet_wrap(~time) +
labs(x = "Mood-Score", y = "Count", title="Counts of Mood-Scores") +
ylim(0,10)
ggplot(dat_l, aes(mood_r)) +
geom_bar() +
facet_wrap(~time) +
labs(x = "Mood-Score", y = "Count", title="Counts of Mood-Scores")
ggplot(dat_l, aes(mood_r)) +
geom_bar() +
facet_wrap(~time) +
labs(x = "Mood-Score", y = "Count", title="Counts of Mood-Scores") +
ylim(0, 500)
ggplot(dat_l, aes(mood_r)) +
geom_bar() +
facet_wrap(~time) +
labs(x = "Mood-Score", y = "Count", title="Counts of Mood-Scores") +
ylim(0, 500) +
theme_classic()
library(effectsize)
exp()
exp(1)
linspace
?linspace
??linspace
1:0.1:0
1:0.1:0
seq(1, 0, -0.01)
exp(seq(1, 0, -0.005))
exp(seq(1, 0, -0.005)) - 1 / (exp(1) - 1)
(exp(seq(1, 0, -0.005)) - 1) / (exp(1) - 1)
(exp(seq(1, 0, -0.005)) - 1) / (exp(1) - 1) -> c
cycle = function(max, min) { min + (max - min) * c }
cycle(1, 0.5)
?repeat
sample
sample
for i in 1:16
for i:1:16
for i=1:16
for i=1:16 { i }
for i in 1:16 { i }
?for
d
dfg
1 % 4
mod(1, 4)
1 %% 4
4 %% 4
for (i in 1:16) { process = c(process, cycle(runif(1) * 0.5 + 0.5, i %% 4 / 3 * 0.3)) }
process = c()
for (i in 1:16) { process = c(process, cycle(runif(1) * 0.5 + 0.5, i %% 4 / 3 * 0.3)) }
acf(process, type="partial")
acf(process)
(exp(seq(1, 0, -0.1)) - 1) / (exp(1) - 1) -> c
process = c()
for (i in 1:16) { process = c(process, cycle(runif(1) * 0.5 + 0.5, i %% 4 / 3 * 0.3)) }
acf(process, type="partial")
dat = read.csv("C:/Users/bente/Downloads/AAA-block1.csv")
head(dat$dot_dir)
dat$optim_x = cos(dat$dot_dir)
dat$optim_y = sin(dat$dot_dir)
head(dat$js_dir)
dat$d_js = sqrt((cos(dat$js_dir * pi / 180) - dat$optim_x)^2 + (sin(dat$js_dir * pi / 180) - dat$optim_y)^2)
acf(dat$d_js)
acf(dat$d_js[2:len(dat$d_js)])
acf(dat$d_js[2:count(dat$d_js)])
acf(dat$d_js[2:length(dat$d_js)])
sum(is.na(dat$d_js))
is.na(dat$d_js)
dat$js_dir_rad = dat$js_dir * pi / 180
sum(is.na(dat$js_dir_rad))
dat$d_js = sqrt((cos(dat$js_dir_rad) - dat$optim_x)^2 + (sin(dat$js_dir_rad) - dat$optim_y)^2)
acf(dat$d_js[!is.na(dat$d_js)])
acf(dat$d_js[!is.na(dat$d_js)], type="partial")
dat = data.frame(matrix(0, ncol=4, nrow=408*3))
colnames(dat) = c("id", "time", "group", "dieting")
dat$id = rep(1:(nrow(dat) / 3), each=3)
dat$time = (1:nrow(dat)-1) %% 3
dat$group = 1:nrow(dat) > nrow(dat) / 2
dat[dat$group == 1,]
nrow(dat[dat$group == 1,])
dat$group = dat$group + 0
dat$dieting = 2.4 + rep(rnorm(nrow(dat) / 3), each=3) + 0.02 * group - 0.09 * time - 0.4 * (time > 0) * group + rnorm(1224, sd=0.87)
dat$dieting = 2.4 + rep(rnorm(nrow(dat) / 3), each=3) + 0.02 * dat$group - 0.09 * dat$time - 0.4 * (dat$time > 0) * dat$group + rnorm(1224, sd=0.87)
library(mixedpower)
library(lme4)
dat$time = factor(dat$time, labels=c("pre", "post", "followup"))
dat$group = factor(dat$group, labels=c("control", "intervention"))
m = lmer(dieting ~ group * time + (1|id), dat)
mixedpower(m, dat, c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000))
mixedpower(m, dat, c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value = 1.65)
summary(m)
write.csv(dat, "BodyImage.csv", row.names = F)
dat = data.frame(matrix(0, ncol=4, nrow=20*3))
colnames(dat) = c("id", "time", "group", "dieting")
dat$id = rep(1:(nrow(dat) / 3), each=3)
dat$time = (1:nrow(dat)-1) %% 3
dat$group = 1:nrow(dat) > nrow(dat) / 2
dat$dieting = 2.4 + rep(rnorm(nrow(dat) / 3), each=3) + 0.02 * dat$group - 0.09 * dat$time - 0.4 * (dat$time > 0) * dat$group + rnorm(1224, sd=0.87)
dat$dieting = 2.4 + rep(rnorm(nrow(dat) / 3), each=3) + 0.02 * dat$group - 0.09 * dat$time - 0.4 * (dat$time > 0) * dat$group + rnorm(60, sd=0.87)
dat$time = factor(dat$time, labels=c("pre", "post", "followup"))
dat$group = factor(dat$group, labels=c("control", "intervention"))
m = lmer(dieting ~ group * time + (1|id), dat)
mixedpower(m, dat, c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value = 1.65)
write.csv(dat, "Sitzungen/BodyImagePilot.csv", row.names = F)
dat = read.csv("Sitzungen/BodyImage.csv")
contrasts(dat$time) = contr.helmert(3)
dat$time = as.factor(dat$time)
dat$group = as.factor(dat$group)
dat$time = factor(dat$time, levels=c("pre", "post", "followup"))
dat$group = as.factor(dat$group)
contrasts(dat$time) = contr.helmert(3)
m = lmer(dieting ~ group * time + (1|id), dat)
summary(m)
contrasts(dat$time)
dat$time = factor(dat$time, levels=c("followup", "post", "pre"))
dat$group = as.factor(dat$group)
contrasts(dat$time) = contr.helmert(3)
m = lmer(dieting ~ group * time + (1|id), dat)
summary(m)
contrasts(dat$time)
powers = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value=1.65)
View(powers)
powers
rownames(powers)
??pivot_longer
library(tidyr)
write.csv(powers, "Sitzungen/PowerSim.csv", row.names=F)
powers2 = read.csv("Sitzungen/PowerSim.csv")
View(powers2)
View(powers)
?write.csv
rm(powers2)
save(powers, file="Sitzungen/PowerSim.RData")
powers2 = load("Sitzungen/PowerSim.RData")
powers2 = powers
rm(powers)
#powers = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value=1.65)
load("Sitzungen/PowerSim.RData")
View(powers)
rm(powers2)
powersLong = pivot_longer(powers, cols=c("20", "50", "100", "500", "1000"), names_to = "n", values_to="power")
View(powersLong)
library(ggplot2)
ggplot(powersLong, aes(n, power, color=effect)) +
geom_point()
ggplot(powersLong, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect))
powersLong$n = factor(powersLong$n, levels=c(20, 50, 100, 500, 1000))
ggplot(powersLong, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect))
ggplot(powersLong, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect)) +
geom_hline(yintercept = 0.8, color="red")
ggplot(powersLong, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect)) +
geom_hline(yintercept = 0.8, color="red") +
theme_classic()
coef(m)
fixef(m)
coefficients(m)
m@beta
m@lower
m@pp
confint(m)
cis = confint(m)
SESOI = cis[4:8, 1]
SESOI = cis[4:8]
SESOI = cis[4:8,]
cis = cis[4:8,]
SESOI = apply(cis, MARGIN=1, function(vec) { min(abs(vec)) })
?mixedpower
powersSESOI = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
cis = cis[3:8,]
cis = confint(m)
cis = cis[3:8,]
SESOI = apply(cis, MARGIN=1, function(vec) { min(abs(vec)) })
powersSESOI = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
powersSESOI = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
save(powersSESOI, "Sitzungen/PowerSimSESOI.RData")
save(powersSESOI, file="Sitzungen/PowerSimSESOI.RData")
cis = confint(m)
cis = cis[3:8,]
SESOI = apply(cis, MARGIN=1, function(vec) { min(abs(vec)) })
#powersSESOI = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
load("Sitzungen/PowerSimSESOI.RData")
powersSESOILong = pivot_longer(powersSESOI, cols=c("20", "50", "100", "500", "1000"), names_to = "n", values_to="power")
powersSESOILong$n = factor(powersSESOILong$n, levels=c(20, 50, 100, 500, 1000))
ggplot(powersSESOILong, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect)) +
geom_hline(yintercept = 0.8, color="red") +
theme_classic()
cis = confint(m)
cis = cis[3:8,]
SESOI = apply(cis, MARGIN=1, function(vec) {
if (vec[1] * vec[2] < 0) 0 else min(abs(vec))
})
#powersSESOI = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
load("Sitzungen/PowerSimSESOI.RData")
powersSESOILong = pivot_longer(powersSESOI, cols=c("20", "50", "100", "500", "1000"), names_to = "n", values_to="power")
powersSESOILong$n = factor(powersSESOILong$n, levels=c(20, 50, 100, 500, 1000))
ggplot(powersSESOILong, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect)) +
geom_hline(yintercept = 0.8, color="red") +
theme_classic()
powersSESOI = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(20, 50, 100, 500, 1000), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
powersSESOILong = pivot_longer(powersSESOI, cols=c("20", "50", "100", "500", "1000"), names_to = "n", values_to="power")
powersSESOILong$n = factor(powersSESOILong$n, levels=c(20, 50, 100, 500, 1000))
ggplot(powersSESOILong, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect)) +
geom_hline(yintercept = 0.8, color="red") +
theme_classic()
View(powersSESOILong)
View(powersSESOI)
save(powersSESOI, file="Sitzungen/PowerSimSESOI.RData")
load("Sitzungen/PowerSimSESOI.RData")
powersSESOILong = pivot_longer(powersSESOI, cols=c("20", "50", "100", "500", "1000"), names_to = "n", values_to="power")
powersSESOILong$n = factor(powersSESOILong$n, levels=c(20, 50, 100, 500, 1000))
ggplot(powersSESOILong, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect)) +
geom_hline(yintercept = 0.8, color="red") +
theme_classic()
datPilot = read.csv("Sitzungen/BodyImagePilot.csv")
datPilot = read.csv("Sitzungen/BodyImagePilot.csv")
dat$time = factor(dat$time, levels=c("followup", "post", "pre"))
dat$group = as.factor(dat$group)
contrasts(dat$time) = contr.helmert(3)
mPilot = lmer(dieting ~ group * time + (1|id), dat)
summary(mPilot)
mPilot = lmer(dieting ~ group * time + (1|id), datPilot)
summary(mPilot)
powersDetail = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(200, 300, 400), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
powersDetail = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(600, 700, 800, 900), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
#powersDetail = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(600, 700, 800, 900), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
load("Sitzungen/PowerSimDetail.RData")
save(powerSimDetail, file="Sitzungen/PowerSimDetail.RData")
save(powersDetail, file="Sitzungen/PowerSimDetail.RData")
#powersDetail = mixedpower(m, dat, fixed_effects=c("group", "time"), simvar="id", steps=c(600, 700, 800, 900), critical_value=1.65, SESOI=SESOI, databased=F, n_sim=1000)
load("Sitzungen/PowerSimDetail.RData")
powersDetailLong = pivot_longer(powersDetail, cols=c("600", "700", "800", "900"), names_to = "n", values_to="power")
powersDetailLong$n = factor(powersDetailLong$n, levels=c(600, 700, 800, 900))
powersSESOILongFull = rbind(powersSESOILong, powersDetailLong)
ggplot(powersSESOILongFull, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect)) +
geom_hline(yintercept = 0.8, color="red") +
theme_classic()
powersSESOILongFull$n = factor(powersSESOILongFull$n, levels=c(20, 50, 100, 500, 600, 700, 800, 900, 1000))
ggplot(powersSESOILongFull, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect)) +
geom_hline(yintercept = 0.8, color="red") +
theme_classic()
ggplot(powersLong, aes(n, power, color=effect)) +
geom_point() +
geom_line(aes(group=effect)) +
geom_hline(yintercept = 0.8, color="red") +
theme_classic()
