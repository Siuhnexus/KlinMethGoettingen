---
title: "KlinMeth-Vorkurs - Sitzung 2"
author: "Bente Hinkenhuis"
format:
  html:
    toc: true
    smooth-scroll: true
    css: ../style.css
    grid: 
      body-width: 1200px
    theme: default
editor: visual
---

# KlinMeth-Vorkurs - R-Sprache und Variablentypen

Heute wollen wir R ein bisschen näher kennenlernen. Am Ende der Sitzung wollen wir dazu in der Lage sein, einzelne Variablen aus unseren Daten auszuwählen und unsere Daten nach verschiedenen Kriterien zu filtern. Um da hinzukommen, müssen wir aber leider erst ein paar Grundlagen klären.

Technisch gesehen ist R zwar eine Programmiersprache, aber für unsere Zwecke müssen wir nicht allzu tief ins Programmieren einsteigen. Erstmal könnt ihr R wie einen Taschenrechner benutzen. Alle Grundrechenarten funktionieren (mal mit dem Sternchen \* und geteilt mit dem Schrägstrich /).

```{r}
5 + 4
5 - 4
5 * 4
5 / 4
```

Ergebnisse von Rechnungen lassen sich zu **Variablen zuweisen**, um später damit weiterrechnen zu können.

## Zuweisungen

Diese Zuweisungen sind auf drei Arten möglich. Die erste Möglichkeit ist ein einfaches Gleichheitszeichen:

```{r}
x = 3 * 4
```

Das Gleichheitszeichen erfüllt also anders als in der Mathematik nicht den Zweck, zwei Ausdrücke zu **vergleichen**, sondern den Ausdruck rechts der Variable links zuzuweisen.

Alternativ dazu kann auch ein Pfeil geschrieben werden:

```{r}
x2 <- 3 * 4
```

Beim Pfeil wird der Ausdruck der Variable zugewiesen, **auf die der Pfeil zeigt**. Folgendes würde also auch funktionieren:

```{r}
3 * 4 -> x3
```

Mit diesen Variablen lässt sich jetzt weiterrechnen.

```{r}
x / 2
x * x2
```

Fürs Rechnen allein brauchen wir R aber natürlich nicht. Die meisten interessanteren Features von R stecken in den vielen verfügbaren **Funktionen**.

## Funktionen

Wir haben in der letzten Sitzung schon 5 R-Funktionen kennengelernt, nämlich `getwd()`, `setwd()`, `read.csv()`, `read.csv2()` und `read.table()`. An der letzten dieser Funktionen möchte ich euch erklären, wie Funktionen funktionieren.

Erstmal ruft man eine Funktion auf, indem man den Funktionsnamen, gefolgt von einer öffnenden und einer schlie?enden Klammer schreibt, also bspw. `getwd()`. Innerhalb der Klammern kann man der Funktion **Parameter** mit Kommata getrennt übergeben, falls welche benötigt werden. Um Parameter zu verstehen, rufen wir jetzt die Hilfe zu `read.table()` auf.

```{r}
?read.table
```

Unter **Usage** ist beschrieben, welche Parameter die Funktion annimmt. Parameter können alles Mögliche sein; Daten, Pfade, Zahlen, Grafiken etc. Die `read.table()` Funktion benötigt einen Parameter namens "file" und nimmt daneben auch noch Parameter wie "header", "sep", "quote", "dec" etc. an. Was die im einzelnen alle bedeuten, ist erstmal nicht so wichtig. Wichtig ist, dass es zwei Möglichkeiten gibt, die Parameter zu setzen:

1.  Wenn die Funktion Werte ohne Parameternamen erhält, wird angenommen, dass die Parameter in der **Reihenfolge der Funktion** vergeben werden. `read.table("test.csv", TRUE, ",")` würde also die Datei "test.csv" unter Annahme von Spaltennamen und einem Komma zwischen den Werten eingelesen werden.
2.  Wenn man ein paar Parameter überspringen möchte, die Reihenfolge der Parameter nicht im Kopf hat oder den eigenen Code verständlicher machen möchte, kann man Parameter auch mit Namen übergeben. `read.table(header=TRUE, sep=",", file="test.csv")` macht also genau dasselbe, nur mit vertauschter Reihenfolge.

Man kann die beiden Methoden auch mischen, sollte dann aber zuerst Parameter ohne Namen übergeben und dann die Parameter mit Namen, wie das in der letzten Sitzung passiert ist.

Das klingt zwar erstmal alles sehr theoretisch, wir benutzen das aber bei ziemlich vielen Funktionen, es ist also essentiell. Aber keine Sorge, man gewöhnt sich schnell daran.

Unter Usage ist übrigens auch angegeben, welche Werte die Funktion für Parameter annimmt, die wir nicht explizit setzen. Bspw. wird für den Dezimaltrenner standardmäßig ein Punkt verwendet.

Nun wollen wir die beiden gelernten Aspekte kombinieren, indem wir Daten aus der Datei der letzten Sitzung laden und in einer Variable abspeichern.

```{r}
dat = read.csv("motivation_precourse.csv")
```

Das ist zwar Code, den wir schon aus der letzten Sitzung kennen, aber jetzt verstehen wir auch, was da eigentlich passiert.

Schauen wir uns genauer an, was in unserer Variable `dat` so drinsteckt.

## Variablentypen

Klickt dazu einmal auf den weißen Pfeil im blauen Kreis neben der Variable im **Environment**-Tab des Fensters oben rechts. So könnt ihr die Namen der einzelnen Spalten/Variablen sehen, die in `dat` vertreten sind.

Jede dieser Variablen ist ein **Vektor** eines bestimmten Typs, enthält also mehrere Einträge dieses Typs. Aber was sind Typen und welche gibt es? Computer speichern Daten auf verschiedene Arten, um die Effizienz von Speicherung und Rechnungen zu erhöhen. Text wird dabei anders gespeichert als Zahlen, und Ganzzahlen nochmal anders als Kommazahlen. Das spiegelt sich auch in den hier vorhandenen Variablen wieder.

-   `precourse` ist ein Vektor vom Typ `chr`, was bedeutet, dass er "characters" enthält, was gleichbedeutend mit Text ist.

-   `subjectNr` ist vom Typ `int`, was für "integer" und damit ganze Zahlen steht.

-   Die anderen beiden Variablen sind vom Typ `num`, enthalten also Dezimalzahlen.

Bestimmte Analyseergebnisse unterscheiden sich je nach Variablentyp, weshalb es nicht schaden kann, zumindest Text und Zahlen auseinanderhalten zu können.

Für statistische Analysen gibt es noch einen wichtigen Variablentyp, den wir noch nicht kennen. Wenn wir mit diskreten Variablen arbeiten, gibt es eine bestimmte Anzahl (qualitativ) unterschiedlicher Ausprägungen. Dieser Variablentyp heißt Faktor und kann in R aus anderen Variablentypen generiert werden. Dazu greifen wir nun zum ersten Mal auf eine Variable im Datensatz zu. Dazu schreiben wir den Namen des Datensatzes `dat`, gefolgt von einem \$-Zeichen und dem Namen der Variable `precourse`.

```{r}
pre_fac = factor(dat$precourse)
```

Wenn ihr oben rechts auf den Datentyp von `pre_fac` schaut, seht ihr da "Factor w/ 2 levels...". R hat also erkannt, dass in `precourse` nur zwei verschiedene Werte vorkommen und deshalb einen Faktor mit zwei Stufen generiert.

In der Praxis würden wir direkt nach dem Einlesen entscheiden, ob eine Variable ein Faktor ist oder nicht, und folgendes schreiben, wenn wir sie in einen Faktor umwandeln wollen:

```{r}
dat$precourse = as.factor(dat$precourse)
```

Hier weisen wir der `precourse`-Variable sie selbst als Faktor zu und **?berschreiben** sie so.

## Pakete installieren und laden

R ist eine Programmiersprache, die wie viele andere auch von zusätzlichen Paketen, die von der Community geschrieben und verwaltet werden, lebt. Für die nächste Sitzung brauchen wir ein Paket namens `ggplot`, welches wir nun installieren und laden wollen.

```{r}
#install.packages("ggplot2")
```

Wenn ihr die Installation abgeschlossen habt, ist das Paket auf eurem Computer gespeichert und ihr müsst es ab jetzt bei jedem Benutzen von R nur laden.

```{r}
library(ggplot2)
```

In diesem Modul werden wir einige nützliche Pakete nutzen. Es ist also wichtig, zu wissen, wie man die installiert.

## Indexing und Subsetting

Für einen grundlegenden Umgang mit Daten fehlt uns jetzt nur noch die Möglichkeit, unsere Daten zu filtern. Ungültige Fragebögen, Personen, die bestimmte Performancekriterien nicht erreichen, oder auch Datensätze mit technischen Fehlern müssen vor einer Analyse ausschließen.

In R funktioniert das dadurch, dass wir einen Teil unseres Datensatzes aufgrund von bestimmten Kriterien auswählen können und mit diesem Teil dann weiterarbeiten. Dazu müssen wir aber zunächst klären, wie wir auf einzelne Zeilen, Spalten oder Zellen in unseren Daten zugreifen.

```{r}
head(dat$mot_post)
```

Am häufigsten muss man in R auf bestimmte Variablen (Spalten) in den Daten zugreifen, um sie bspw. in Faktoren umzuwandeln. Wie wir bereits gesehen haben, macht man das mit einem `$` gefolgt von dem Namen der Variable. Mit der `head()`-Funktion geben wir nur die ersten paar Werte aus (es gibt auch eine `tail()`-Funktion für die letzten paar Werte).

```{r}
dat[1, 4]
```

Wenn wir auf einzelne Zellen zugreifen wollen, schreiben wir eckige Klammern mit der Zeilennummer, gefolgt von einem Komma und der Spaltennummer. Hier greifen wir also auf die erste Zeile der vierten Spalte (subject_nr) zu, geben uns also die subject-ID der ersten Person im Datensatz zurück. Die erste ID ist erwartungsgemäß 1.

Lassen wir entweder die Zeilennummer oder die Spaltennummer weg, bekommen wir die ganze Zeile bzw. Spalte zurück.

```{r}
head(dat[, 3])
```

Diese Zeile macht also genau das gleiche wie die Zeile zwei Chunks weiter oben. Besonders hilfreich ist aber die Möglichkeit, nur bestimmte Zeilen auszuwählen. Um damit unseren Datensatz zu filtern, brauchen wir aber noch eine Grundlage.

### Vergleiche

In R lassen sich wie in vielen anderen Sprachen auch Variablen und Werte vergleichen. Ein Beispiel wäre der Test auf Gleichheit.

```{r}
2 ^ 3 == 8
```

Mit dem doppelten Gleichheitszeichen können wir diesen Gleichheitsvergleich ausführen. Zurück bekommen wir einen sogenannten booleschen Wert, auch Wahrheitswert genannt. Dieser hat zwei mögliche Zustände: Entweder der Vergleich ist wahr (TRUE) oder er ist falsch (FALSE). In R kann man auch selbst boolesche Werte mit `TRUE` oder `T` bzw. `FALSE` oder `F` schreiben.

Vergleiche funktionieren auch mit Vektoren und Datensätzen.

```{r}
2 ^ (1:4) == 8
head(dat == "Ohne")
head(dat$precourse == "Ohne")
```

Der erste Vergleich zeigt uns, dass nur 2 hoch 3 8 ergibt. Im zweiten Vergleich schauen wir, welche Werte im Datensatz "Ohne" sind. Dabei vergleichen wir aber alle Spalten mit "Ohne" was natürlich keinen Sinn ergibt. Deshalb schauen wir uns im letzten Vergleich nur die `precourse`-Spalte an. Der Code in der letzten Zeile ist sehr nützlich zum Filtern von Datensätzen. Ihr könnt schon einmal darüber nachdenken, wie das funktionieren könnte.

Es gibt natürlich auch noch andere Vergleichsmöglichkeiten, gerade wenn man mit Zahlen arbeitet:

-   `!=` gibt `TRUE` zurück, wenn zwei Werte nicht gleich sind (`8 != 9` =\> `TRUE`)

-   `>` gibt `TRUE` zurück, wenn der linke Wert größer als der rechte ist (`9 > 8` =\> `TRUE`)

-   `<` gibt `TRUE` zurück, wenn der linke Wert kleiner als der rechte ist (`8 < 9` =\> `TRUE`)

-   `>=` gibt `TRUE` zurück, wenn der linke Wert größer als oder gleich dem rechten ist (`9 >= 9` =\> `TRUE`)

-   `<=` gibt `TRUE` zurück, wenn der linke Wert kleiner als oder gleich dem rechten ist (`8 <= 8`{style="caret-color: white;"} =\> `TRUE`{style="caret-color: white;"})

Für uns reicht aber meistens ein Vergleich auf Gleichheit. Eine nützliche Sache gibt es noch; Die Anzahl an `TRUE`-Werten lassen sich leicht zählen, sodass wir herausfinden können, wie viele Leute es gibt, die den Vorkurs nicht besucht haben:

```{r}
sum(dat$precourse == "Ohne")
```

### Subsetting

Mit unserem neuen Wissen über Vergleiche können wir jetzt die Daten nach Leuten filtern, die den Vorkurs nicht besucht haben.

```{r}
dat_ohne = dat[dat$precourse == "Ohne", ]
dat_ohne[dat_ohne$precourse != "Ohne", ]
```

Wenn wir einen Vektor mit booleschen Werten an die Stelle schreiben, wo sonst die Zeilennummer steht, wählt R einfach alle Spalten aus, wo der boolesche Wert `TRUE` ist. So können wir nur die Zeilen mit Leuten auswählen, wo Leute den Vorkurs nicht besucht haben.

Dieser Code ist zugegebenermaßen ein bisschen unschön. Zum Glück gibt es in R auch eine Funktion, die genau das gleiche macht, aber ein bisschen übersichtlicher ist.

```{r}
dat_first_100 = subset(dat, dat$subjectNr <= 100)
dat_ohne = subset(dat, dat$precourse == "Ohne")
```

Mit `subset()` können wir auch nur bestimmte Spalten auswählen.

```{r}
dat_no_pre = subset(dat, select=c("precourse", "mot_post", "subjectNr"))
```

Jetzt haben wir alle wichtigen Funktionen zum Umgang mit Daten kennengelernt. In der nächsten Sitzung werden wir uns ggplot anschauen, um schöne Grafiken erstellen zu können.
