---
title: "growth model with splines"
author: "York Hagmayer"
date: "11 01 2023"
format:
  html:
    toc: true
    smooth-scroll: true
    css: ../style.css
    grid: 
      body-width: 1200px
    theme: default
editor: visual
---

```{r warning=FALSE, message=FALSE, results='hide'}
library(ggplot2)
library(nlme)
library(lmtest)
library(rcompanion)
library(tidyr)
library(car)
library(psych)
```

## Working directory setzen

```{r}
setwd("~/Teaching/Master/Methoden_Klippt/Methoden Klippt 2022/Datenbeispiele/Woche8_growth2")
```

## Daten einlesen und ins long format transformieren

Bei der Transformation ins long format ist zu beachten, dass nun zwei Variablen transformiert werden müssen: der Language Score und der Field Trip. Dazu ist es am einfachsten, die Daten zu teilen, dann jeweils ins long format zu transfomieren und dann wieder zusammenzufügen.

```{r}
data <- read.csv("Verstaerkung.csv")

# ID als Faktor
data$ID <- as.factor(data$ID)

# ins long format
data_long <- pivot_longer(data, cols = c(Tag1:Tag24), names_to = "Tag", values_to = "Verhalten")
data_long$Tag_num <- rep(1:24, 80)

```

## Plot der Daten

```{r}
#erste 20 Personen
data_long_sub <- subset(data_long, as.numeric(ID) <= 21)

ggplot(data_long_sub, aes(x=Tag_num, y=Verhalten)) +
  geom_point() +
  geom_line(aes(color = ID), show.legend =FALSE) +
  ylim(0, 20) +
  labs(title = "Verhaltenshäufigkeit", x = "Tag", y = "Häufigkeit Verhalten", color = "ID")

ggplot(data_long_sub, aes(x=Tag_num, y=Verhalten)) +
  geom_point(aes(color = ID)) +
  geom_smooth(aes(color = ID), method = "loess", show.legend = FALSE) +
  ylim(0, 20) +
  labs(title = "Verhaltenshäufigkeit", x = "Tag", y = "Häufigkeit Verhalten", color = "ID")

```

## Deskriptive Analyse

```{r}
desmat <- describeBy(data_long$Verhalten, group = data_long$Tag_num, mat = TRUE)
desmat

ggplot(desmat, aes(x=as.numeric(group1), y=mean)) +
  geom_point() +
  geom_line() +
  ylim(0, 15) +
  labs(title = "Mittlere Verhaltenshäufigkeit", x = "Tag", y = "Häufigkeit Verhalten")

```

## Modell mit Trends

```{r}
M1 <- lme(data = data_long, fixed = Verhalten ~ poly(Tag_num, degree = 3), random = ~ 1 | ID, method = "ML")
summary(M1)

```

### Analyse der Residuen

```{r}
data_long$residualsM1 <- residuals(M1, type = "normalized")


## Verteilung der Residuen zu den Messzeitpunkten
plot(data_long$Tag_num, data_long$residualsM1)
abline(h=0)

ggplot(data_long, aes(x = as.factor(Tag_num), y = residualsM1)) +
  geom_point() +
  geom_jitter(width = 0.3, height = 0) + 
   geom_violin() +
    ylim(-10, 10) +
  labs(title = "Residuen", x = "Messung", y = "Std. Residuen")

```

## Vorhergesagte Verläufe

```{r}
# Fitted values aus dem Random Slope Modell
data_long$fittedM1 = fitted(M1)

# Wir erstellen zu dem Modell eine Grafik, die die Schätzungen zeigt
ggplot(data_long, aes(Tag_num, fittedM1)) +
  geom_point() +
  geom_line(aes(color = ID), show.legend = FALSE) +
  ylim(0, 20) +
  labs(title = "Vorhergesagter Verlauf Verhaltenshäufigkeit", x = "Tag", y = "Häufigkeit", color = "ID")
# Nicht so richtig toll
```

## ANalyse mit Splines

knots = Tag7 und Tag17

```{r}
knot1 = 7
knot2 = 17
MaxTag = 24
N = 80

data_long$SPLINE_1 <- rep(c(0:6, rep(6,17)), 80)
data_long$SPLINE_2 <- rep(c(rep(0,7), 1:10, rep(10,7)), 80)
data_long$SPLINE_3 <- rep(c(rep(0,17), 1:7), 80)

# Allgemein
data_long$SPLINE_1b <- rep(c(0:(knot1-1), rep(knot1-1,MaxTag-knot1)), N)
data_long$SPLINE_2b <- rep(c(rep(0,knot1), 1:(knot2-knot1), rep((knot2-knot1),7)), N)
data_long$SPLINE_3b <- rep(c(rep(0,knot2), 1:(MaxTag-knot2)), N)

M2 <- lme(data = data_long, fixed = Verhalten ~ SPLINE_1 + SPLINE_2 + SPLINE_3, random = ~ 1 | ID, method = "ML")
summary(M2)

# Mit random slope für Verstärkungsphase
M3 <- lme(data = data_long, fixed = Verhalten ~ SPLINE_1 + SPLINE_2 + SPLINE_3, random = ~ SPLINE_2 | ID, method = "ML")
summary(M3)

# Vergleich mit vs. ohne random slope
lrtest(M2, M3)
AIC(M2)
AIC(M3)
## mit ist besser
```

### Analyse der Residuen

```{r}
#Model 2
data_long$residualsM2 <- residuals(M2, type = "normalized")

## Verteilung der Residuen zu den Messzeitpunkten
plot(data_long$Tag_num, data_long$residualsM2)
abline(h=0)

ggplot(data_long, aes(x = as.factor(Tag_num), y = residualsM2)) +
  geom_point() +
  geom_jitter(width = 0.3, height = 0) + 
   geom_violin() +
    ylim(-10, 10) +
  labs(title = "Residuen Model 2 Splines", x = "Messung", y = "Std. Residuen")

#Model 3
data_long$residualsM3 <- residuals(M3, type = "normalized")

## Verteilung der Residuen zu den Messzeitpunkten
plot(data_long$Tag_num, data_long$residualsM3)
abline(h=0)

ggplot(data_long, aes(x = as.factor(Tag_num), y = residualsM3)) +
  geom_point() +
  geom_jitter(width = 0.3, height = 0) + 
   geom_violin() +
    ylim(-10, 10) +
  labs(title = "Residuen Modell 3 Splines random slope Spline 2", x = "Messung", y = "Std. Residuen")

```

## Vorhergesagte Verläufe

```{r}
# Fitted values aus dem Spline-Modell 2
data_long$fittedM2 = fitted(M2)

# Graphik mit Vorhersage
ggplot(data_long, aes(Tag_num, fittedM2)) +
  geom_point() +
  geom_line(aes(color = ID), show.legend = FALSE) +
  ylim(-5, 25) +
  labs(title = "Vorhergesagter Verlauf Verhaltenshäufigkeit Modell2", x = "Tag", y = "Häufigkeit", color = "ID")

# Fitted values aus dem Spline-Modell 3
data_long$fittedM3 = fitted(M3)

# Graphik mit Vorhersage
ggplot(data_long, aes(Tag_num, fittedM3)) +
  geom_point() +
  geom_line(aes(color = ID), show.legend = FALSE) +
  ylim(0, 25) +
  labs(title = "Vorhergesagter Verlauf Verhaltenshäufigkeit Modell3", x = "Tag", y = "Häufigkeit", color = "ID")
```
